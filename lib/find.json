{
   "transactions": {
      "bid": {
         "order": [
            "name",
            "amount"
         ],
         "parameters": {
            "amount": "UFix64",
            "name": "String"
         }
      },
      "bidProfile": {
         "order": [
            "name",
            "amount"
         ],
         "parameters": {
            "amount": "UFix64",
            "name": "String"
         }
      },
      "cancelAuction": {
         "order": [
            "name"
         ],
         "parameters": {
            "name": "String"
         }
      },
      "cancelBid": {
         "order": [
            "name"
         ],
         "parameters": {
            "name": "String"
         }
      },
      "createProfile": {
         "order": [
            "name"
         ],
         "parameters": {
            "name": "String"
         }
      },
      "delistSale": {
         "order": [
            "name"
         ],
         "parameters": {
            "name": "String"
         }
      },
      "editProfile": {
         "order": [
            "name",
            "description",
            "avatar",
            "tags",
            "allowStoringFollowers",
            "links"
         ],
         "parameters": {
            "allowStoringFollowers": "Bool",
            "avatar": "String",
            "description": "String",
            "links": "[{String: String}]",
            "name": "String",
            "tags": "[String]"
         }
      },
      "fulfill": {
         "order": [
            "name"
         ],
         "parameters": {
            "name": "String"
         }
      },
      "fulfillAuction": {
         "order": [
            "owner",
            "name"
         ],
         "parameters": {
            "name": "String",
            "owner": "Address"
         }
      },
      "fulfillAuctionBidder": {
         "order": [
            "owner",
            "name"
         ],
         "parameters": {
            "name": "String",
            "owner": "Address"
         }
      },
      "increaseBid": {
         "order": [
            "name",
            "amount"
         ],
         "parameters": {
            "amount": "UFix64",
            "name": "String"
         }
      },
      "listForAuction": {
         "order": [
            "name",
            "auctionStartPrice",
            "auctionReservePrice",
            "auctionDuration",
            "auctionExtensionOnLateBid"
         ],
         "parameters": {
            "auctionDuration": "UFix64",
            "auctionExtensionOnLateBid": "UFix64",
            "auctionReservePrice": "UFix64",
            "auctionStartPrice": "UFix64",
            "name": "String"
         }
      },
      "listForSale": {
         "order": [
            "name",
            "directSellPrice"
         ],
         "parameters": {
            "directSellPrice": "UFix64",
            "name": "String"
         }
      },
      "moveNameToAddress": {
         "order": [
            "name",
            "receiverAddress"
         ],
         "parameters": {
            "name": "String",
            "receiverAddress": "Address"
         }
      },
      "moveNameToName": {
         "order": [
            "name",
            "receiverName"
         ],
         "parameters": {
            "name": "String",
            "receiverName": "String"
         }
      },
      "register": {
         "order": [
            "name",
            "amount"
         ],
         "parameters": {
            "amount": "UFix64",
            "name": "String"
         }
      },
      "rejectDirectOffer": {
         "order": [
            "name"
         ],
         "parameters": {
            "name": "String"
         }
      },
      "renew": {
         "order": [
            "name",
            "amount"
         ],
         "parameters": {
            "amount": "UFix64",
            "name": "String"
         }
      },
      "sendFT": {
         "order": [
            "name",
            "amount",
            "type"
         ],
         "parameters": {
            "amount": "UFix64",
            "name": "String",
            "type": "String"
         }
      },
      "setProfile": {
         "order": [
            "avatar"
         ],
         "parameters": {
            "avatar": "String"
         }
      },
      "startAuction": {
         "order": [
            "name"
         ],
         "parameters": {
            "name": "String"
         }
      }
   },
   "scripts": {
      "address_status": {
         "order": [
            "user"
         ],
         "parameters": {
            "user": "Address"
         }
      },
      "collections": {
         "order": [
            "address"
         ],
         "parameters": {
            "address": "Address"
         }
      },
      "isFindUser": {
         "order": [
            "user"
         ],
         "parameters": {
            "user": "Address"
         }
      },
      "name_status": {
         "order": [
            "name"
         ],
         "parameters": {
            "name": "String"
         }
      },
      "profile": {
         "order": [
            "address"
         ],
         "parameters": {
            "address": "Address"
         }
      },
      "remaining": {
         "order": [
            "user"
         ],
         "parameters": {
            "user": "Address"
         }
      },
      "reserveStatus": {
         "order": [
            "user"
         ],
         "parameters": {
            "user": "Address"
         }
      },
      "status": {
         "order": [
            "name"
         ],
         "parameters": {
            "name": "String"
         }
      }
   },
   "networks": {
      "emulator": {
         "scripts": {
            "address_status": "import FIND from 0xf8d6e0586b0a20c7\nimport Profile from 0xf8d6e0586b0a20c7\n\npub struct FINDReport{\n\tpub let profile:Profile.UserProfile?\n\tpub let bids: [FIND.BidInfo]\n\tpub let leases: [FIND.LeaseInformation]\n\n\tinit(profile: Profile.UserProfile?, bids: [FIND.BidInfo], leases : [FIND.LeaseInformation]) {\n\t\tself.profile=profile\n\t\tself.bids=bids\n\t\tself.leases=leases\n\t}\n}\n\n//Check the status of a fin user\npub fun main(user: Address) : FINDReport{\n\n\tlet account=getAccount(user)\n\tlet bidCap = account.getCapability\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e(FIND.BidPublicPath)\n\n\tlet leaseCap = account.getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\n\treturn FINDReport(\n\t\tprofile: account.getCapability\u003c\u0026{Profile.Public}\u003e(Profile.publicPath).borrow()?.asProfile(),\n\t\tbids: bidCap.borrow()?.getBids() ?? [],\n\t\tleases: leaseCap.borrow()?.getLeaseInformation() ?? []\n\t)\n\n}",
            "collections": "import NonFungibleToken from 0xf8d6e0586b0a20c7\n\n//mainnet\nimport Art from 0xd796ff17107bbff6\nimport Marketplace from 0xd796ff17107bbff6\nimport GooberXContract from 0x34f2bf4a80bb0f69\nimport Flovatar from 0x921ea449dffec68a\nimport FlovatarMarketplace from  0x921ea449dffec68a\nimport RareRooms_NFT from 0x329feb3ab062d289\nimport MotoGPCard from 0xa49cc0ee46c54bfb\nimport Gaia from 0x8b148183c28ff88f\nimport ChainmonstersRewards from 0x93615d25d14fa337\n\n\npub struct MetadataCollection{\n\tpub let type: String\n\tpub let items: [MetadataCollectionItem]\n\n\tinit(type:String, items: [MetadataCollectionItem]) {\n\t\tself.type=type\n\t\tself.items=items\n\t}\n}\n\n\npub struct MetadataCollectionItem {\n\tpub let id:UInt64\n\tpub let name: String\n\tpub let image: String\n\tpub let url: String\n\tpub let listPrice: UFix64?\n\tpub let listToken: String?\n\n\n\tinit(id:UInt64, name:String, image:String, url:String, listPrice: UFix64?, listToken:String?) {\n\t\tself.id=id\n\t\tself.name=name\n\t\tself.url=url\n\t\tself.image=image\n\t\tself.listToken=listToken\n\t\tself.listPrice=listPrice\n\t}\n}\n\npub fun main(address: Address) : {String : MetadataCollection}? {\n\n\tlet account = getAccount(address)\n\tlet results : {String :  MetadataCollection}={}\n\n\tlet flovatarList= Flovatar.getFlovatars(address: address)\n\tif flovatarList.length \u003e 0 {\n\t\tlet items: [MetadataCollectionItem] = []\n\t\tfor flovatar in flovatarList  {\n\t\t\tvar name = flovatar.name\n\t\t\tif name == \"\" {\n\t\t\t\tname=\"Flovatar #\".concat(flovatar.id.toString())\n\t\t\t}\n\t\t\titems.append(MetadataCollectionItem(\n\t\t\t\tid: flovatar.id, \n\t\t\t\tname: name, \n\t\t\t\timage: \"https://flovatar.com/api/image/\".concat(flovatar.id.toString()),\n\t\t\t\turl: \"https://flovatar.com/flovatars/\".concat(flovatar.id.toString()).concat(\"/\").concat(address.toString()),\n\t\t\t\tlistPrice: nil,\n\t\t\t\tlistToken: nil\n\t\t\t))\n\t\t}\n\n\t\tresults[\"flovatar\"] = MetadataCollection(type: Type\u003c@Flovatar.Collection\u003e().identifier, items: items)\n\t}\n\n\tlet flovatarMarketDetails = FlovatarMarketplace.getFlovatarSales(address: address)\n\tif flovatarMarketDetails.length \u003e 0 {\n\t\tlet items: [MetadataCollectionItem] = []\n\t\tfor flovatar in flovatarMarketDetails  {\n\t\t\tvar\tname=\"Flovatar #\".concat(flovatar.id.toString())\n\t\t\titems.append(MetadataCollectionItem(\n\t\t\t\tid: flovatar.id, \n\t\t\t\tname: name, \n\t\t\t\timage: \"https://flovatar.com/api/image/\".concat(flovatar.id.toString()),\n\t\t\t\turl: \"https://flovatar.com/flovatars/\".concat(flovatar.id.toString()).concat(\"/\").concat(address.toString()),\n\t\t\t\tlistPrice: flovatar.price,\n\t\t\t\tlistToken: \"Flow\"\n\t\t\t))\n\t\t}\n\n\t\tif items.length != 0 {\n\t\t\tresults[\"flovatarSales\"] = MetadataCollection(type: Type\u003c@Flovatar.Collection\u003e().identifier, items: items)\n\t\t}\n\t}\n\n\tlet versusImageUrlPrefix = \"https://res.cloudinary.com/dxra4agvf/image/upload/c_fill,w_600/f_auto/maincache\"\n\tlet artList = Art.getArt(address: address)\n\tif artList.length \u003e 0 {\n\t\tlet items: [MetadataCollectionItem] = []\n\t\tfor art in artList {\n\t\t\titems.append(MetadataCollectionItem(\n\t\t\t\tid: art.id, \n\t\t\t\tname: art.metadata.name.concat(\" edition \").concat(art.metadata.edition.toString()).concat(\"/\").concat(art.metadata.maxEdition.toString()).concat(\" by \").concat(art.metadata.artist),  \n\t\t\t\timage: versusImageUrlPrefix.concat(art.cacheKey), \n\t\t\t\turl: \"https://www.versus.auction/piece/\".concat(address.toString()).concat(\"/\").concat(art.id.toString()).concat(\"/\"),\n\t\t\t\tlistPrice: nil,\n\t\t\t\tlistToken: nil\n\t\t\t))\n\t\t}\n\t\tresults[\"versus\"]= MetadataCollection(type: Type\u003c@Art.Collection\u003e().identifier, items: items)\n\t}\n\n\tlet versusMarketplace = account.getCapability\u003c\u0026{Marketplace.SalePublic}\u003e(Marketplace.CollectionPublicPath)\n\tif versusMarketplace.check() {\n\t\tlet items: [MetadataCollectionItem] = []\n\t\tlet versusMarket = versusMarketplace.borrow()!.listSaleItems()\n\t\tfor saleItem in versusMarket {\n\t\t\titems.append(MetadataCollectionItem(\n\t\t\t\tid: saleItem.id, \n\t\t\t\tname: saleItem.art.name.concat(\" edition \").concat(saleItem.art.edition.toString()).concat(\"/\").concat(saleItem.art.maxEdition.toString()).concat(\" by \").concat(saleItem.art.artist),\n\t\t\t\timage: versusImageUrlPrefix.concat(saleItem.cacheKey), \n\t\t\t\turl: \"https://www.versus.auction/listing/\".concat(saleItem.id.toString()).concat(\"/\"),\n\t\t\t\tlistPrice: saleItem.price,\n\t\t\t\tlistToken: \"Flow\"\n\t\t\t))\n\t\t}\n\t\tif items.length != 0 {\n\t\t\tresults[\"versusSale\"]= MetadataCollection(type: Type\u003c@Marketplace.SaleCollection\u003e().identifier, items: items)\n\t\t}\n\t}\n\n\n\tlet goobersCap = account.getCapability\u003c\u0026GooberXContract.Collection{NonFungibleToken.CollectionPublic, GooberXContract.GooberCollectionPublic}\u003e(GooberXContract.CollectionPublicPath)\n\n\tif goobersCap.check() {\n\t\tlet items: [MetadataCollectionItem] = []\n\t\tlet goobers = goobersCap.borrow()!.listUsersGoobers()\n\t\tfor id in goobers.keys {\n\t\t\tlet goober = goobers[id]!\n\t\t\titems.append(MetadataCollectionItem(\n\t\t\t\tid: id,\n\t\t\t\tname: \"Goober #\".concat(id.toString()),\n\t\t\t\timage: goober.uri,\n\t\t\t\turl: \"https://partymansion.io/gooberz/\".concat(id.toString()),\n\t\t\t\tlistPrice: nil,\n\t\t\t\tlistToken: nil\n\t\t\t))\n\n\t\t}\n\t\tif items.length != 0 {\n\t\t\tresults[\"goobers\"] = MetadataCollection(type: Type\u003c@GooberXContract.Collection\u003e().identifier, items: items)\n\t\t}\n\t}\n\n\n\t/*\n\tlet bbCap = account.getCapability\u003c\u0026{BasicBeast.BeastCollectionPublic}\u003e(BasicBeast.CollectionPublicPath)\n\tif bbCap.check() {\n\t\tlet items: [MetadataCollectionItem]=[]\n\t\tlet bb = bbCap.borrow()!\n\n\t\tfor bid in bb.getIDs() {\n\t\t\tlet beast = bb.borrowBeast(id: bid)!\n\t\t\tlet template=beast.data.beastTemplate\n\t\t\tlet name= beast.nickname ?? template.name\n\t\t\titems.append(MetadataCollectionItem(id:beast.id, name:name, url:template.image, ipfsHash:\"\", svg: \"\"))\n\n\t\t}\n\t\tresults[\"basicbeasts\"] = MetadataCollection(type: Type\u003c@BasicBeast.Collection\u003e().identifier, items: items)\n\t}\n\t*/\n\n\n\tlet rareRoomCollection = account.getCapability\u003c\u0026RareRooms_NFT.Collection{RareRooms_NFT.RareRooms_NFTCollectionPublic}\u003e(RareRooms_NFT.CollectionPublicPath)\n\tif rareRoomCollection.check() {\n\t\tlet rareRoomNfts = rareRoomCollection.borrow()!.getIDs()\n\t\tlet items: [MetadataCollectionItem] = []\n\t\tfor id in rareRoomNfts {\n\t\t\tlet nft = rareRoomCollection.borrow()!.borrowRareRooms_NFT(id: id)!\n\t\t\titems.append(MetadataCollectionItem(\n\t\t\t\tid: id,\n\t\t\t\tname: RareRooms_NFT.getSetMetadataByField(setId: nft.setId, field: \"name\")!,\n\t\t\t\t// we use \"preview\" and not \"image\" because of potential .glg and .mp4 file types\n\t\t\t\timage: RareRooms_NFT.getSetMetadataByField(setId: nft.setId, field: \"preview\")!,\n\t\t\t\turl: \"https://rarerooms.io/tokens/\".concat(id.toString()),\n\t\t\t\tlistPrice: nil,\n\t\t\t\tlistToken: nil\n\t\t\t))\n\t\t}\n\n\t\tif items.length != 0 {\n\t\t\tresults[\"RareRooms\"] = MetadataCollection(type: Type\u003c@RareRooms_NFT.Collection\u003e().identifier, items: items)\n\t\t}\n\t}\n\n\n\tlet motoGPCollection = account.getCapability\u003c\u0026MotoGPCard.Collection{MotoGPCard.ICardCollectionPublic}\u003e(/public/motogpCardCollection)\n\tif motoGPCollection.check() {\n\t\tlet motoGPNfts = motoGPCollection.borrow()!.getIDs()\n\t\tlet items: [MetadataCollectionItem] = []\n\t\tfor id in motoGPNfts {\n\t\t\tlet nft = motoGPCollection.borrow()!.borrowCard(id: id)!\n\t\t\tlet metadata = nft.getCardMetadata()!\n\t\t\titems.append(MetadataCollectionItem(\n\t\t\t\tid: id,\n\t\t\t\tname: metadata.name,\n\t\t\t\timage: metadata.imageUrl,\n\t\t\t\turl: \"https://motogp-ignition.com/nft/card/\".concat(id.toString()).concat(\"?owner=\").concat(address.toString()),\n\t\t\t\tlistPrice: nil,\n\t\t\t\tlistToken: nil\n\t\t\t))\n\t\t}\n\n\t\tif items.length != 0 {\n\t\t\tresults[\"MotoGP\"] = MetadataCollection(type: Type\u003c@MotoGPCard.Collection\u003e().identifier, items: items)\n\t\t}\n\t}\n\n\tlet gaiaCollection = account.getCapability\u003c\u0026{Gaia.CollectionPublic}\u003e(Gaia.CollectionPublicPath)\n\tif gaiaCollection.check() {\n\t\tlet gaiaNfts = gaiaCollection.borrow()!.getIDs()\n\t\tlet items: [MetadataCollectionItem] = []\n\t\tfor id in gaiaNfts {\n\t\t\tlet nft = gaiaCollection.borrow()!.borrowGaiaNFT(id: id)!\n\t\t\tlet metadata = Gaia.getTemplateMetaData(templateID: nft.data.templateID)!\n\t\t\titems.append(MetadataCollectionItem(\n\t\t\t\tid: id,\n\t\t\t\tname: metadata[\"title\"]!,\n\t\t\t\timage: metadata[\"img\"]!,\n\t\t\t\turl: metadata[\"uri\"]!,\n\t\t\t\tlistPrice: nil,\n\t\t\t\tlistToken: nil\n\t\t\t))\n\t\t}\n\n\t\tif items.length != 0 {\n\t\t\tresults[\"Gaia\"] = MetadataCollection(type: Type\u003c@Gaia.Collection\u003e().identifier, items: items)\n\t\t}\n\t}\n\n\tlet chamonsterSeasonTable :  {UInt32: String} = {0 : \"kickstarter\", 1 : \"alpha\", 2 : \"genesis\", 4 : \"flowfest2021\" , 3: \"closedbeta\" }\n\n\tlet chainmonstersRewardsCollection = account.getCapability\u003c\u0026{ChainmonstersRewards.ChainmonstersRewardCollectionPublic}\u003e(/public/ChainmonstersRewardCollection)\n\tif chainmonstersRewardsCollection.check() {\n\t\tlet nfts = chainmonstersRewardsCollection.borrow()!.getIDs()\n\t\tlet items: [MetadataCollectionItem] = []\n\t\tfor id in nfts {\n\t\t\tlet nft = chainmonstersRewardsCollection.borrow()!.borrowReward(id: id)!\n\t\t\tlet rewardID = nft.data.rewardID\n\t\t\t// Other interesting metadata available are:\n\t\t\t// \t\t- serialNumber: nft.data.serialNumber\n\t\t\t// \t\t- totalMinted: ChainmonstersRewards.getNumRewardsMinted(rewardID: nft.data.rewardID)!\n\t\t\tlet season = ChainmonstersRewards.getRewardSeason(rewardID:nft.data.rewardID)!\n\n\t\t\tvar seasonName = chamonsterSeasonTable[season] ?? \"unknown\".concat(season.toString())\n\n\t\t\tif season == 3 \u0026\u0026 rewardID \u003c 45 {\n\t\t\t\tseasonName = \"flowfest2021\"\n\t\t\t}\n\t\t\titems.append(MetadataCollectionItem(\n\t\t\t\tid: id,\n\t\t\t\tname: ChainmonstersRewards.getRewardMetaData(rewardID: nft.data.rewardID)!,\n\t\t\t\timage: \"https://chainmonsters.com/images/rewards/\".concat(seasonName).concat(\"/\").concat(rewardID.toString()).concat(\".png\"),\n\t\t\t\turl: \"https://chainmonsters.com\",\n\t\t\t\tlistPrice: nil,\n\t\t\t\tlistToken: nil\n\t\t\t))\n\t\t}\n\t\tif items.length != 0 {\n\t\t\tresults[\"ChainmonstersRewards\"] = MetadataCollection(type: Type\u003c@ChainmonstersRewards.Collection\u003e().identifier, items: items)\n\t\t}\n\t}\n\n\n\tif results.keys.length == 0 {\n\t\treturn nil\n\t}\n\treturn results\n}",
            "isFindUser": "import Profile from 0xf8d6e0586b0a20c7\nimport FIND from 0xf8d6e0586b0a20c7\n\n//Check the status of a fin user\npub fun main(user: Address) : Bool {\n\n\tlet account=getAccount(user)\n\tlet leaseCap=account.getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\tlet profileCap=account.getCapability\u003c\u0026{Profile.Public}\u003e(Profile.publicPath)\n\n\treturn leaseCap.check() \u0026\u0026 profileCap.check()\n\n}",
            "name_status": "import FIND from 0xf8d6e0586b0a20c7\nimport Profile from 0xf8d6e0586b0a20c7\n\npub struct FINDNameReport{\n\tpub let profile:Profile.UserProfile?\n\tpub let lease: FIND.LeaseInformation?\n\tpub let status: String\n\tpub let cost: UFix64\n\tpub let leases: [FIND.LeaseInformation]\n\n\tinit(status: String, profile: Profile.UserProfile?, lease : FIND.LeaseInformation?,  cost: UFix64, leases: [FIND.LeaseInformation]) {\n\t\tself.status=status\n\t\tself.profile=profile\n\t\tself.lease=lease\n\t\tself.cost=cost\n\t\tself.leases=leases\n\t}\n}\n\n//Check the status of a fin user\npub fun main(name: String) : FINDNameReport{\n\n\tlet status=FIND.status(name)\n\tlet cost=FIND.calculateCost(name)\n\tif let address=status.owner {\n\t\tlet account=getAccount(address)\n\t\tlet leaseCap = account.getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\n\t\tlet profile= account.getCapability\u003c\u0026{Profile.Public}\u003e(Profile.publicPath).borrow()\n\t\tvar lease:FIND.LeaseInformation?=nil\n\t\tif leaseCap.check() {\n\t\t\tlease=leaseCap.borrow()!.getLease(name)\n\t\t}\n\t\treturn FINDNameReport(\n\t\t\tstatus: lease?.status ?? \"taken\",\n\t\t\tprofile: profile?.asProfile(),\n\t\t\tlease: lease,\n\t\t\tcost:  cost,\n\t\t\tleases: leaseCap.borrow()?.getLeaseInformation() ?? []\n\t\t)\n\n\t}\n\n\tvar statusValue= \"FREE\"\n\tif  status.status == FIND.LeaseStatus.TAKEN {\n\t\tstatusValue=\"NO_PROFILE\"\n\t}\n\treturn FINDNameReport(\n\t\tstatus: statusValue,\n\t\tprofile: nil, \n\t\tlease: nil,\n\t\tcost: cost,\n\t\tleases: [],\n\t)\n\n}",
            "profile": "import Profile from 0xf8d6e0586b0a20c7\n\n//Check the status of a fin user\npub fun main(address: Address) :  Profile.UserProfile? {\n\treturn getAccount(address)\n\t\t.getCapability\u003c\u0026{Profile.Public}\u003e(Profile.publicPath)\n\t\t.borrow()?.asProfile()\n}",
            "remaining": "import FIND from 0xf8d6e0586b0a20c7\n\n\n//Check the status of a fin user\npub fun main(user: Address) : [String] {\n\n\tlet account=getAccount(user)\n\tlet leaseCap = account.getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\n\tlet leases=leaseCap.borrow()?.getLeaseInformation() ?? []\n\n\tvar leasesWithBids :[String] =[]\n\tfor lease in leases {\n\t\tif lease.latestBidBy == nil {\n\t\t\tleasesWithBids.append(lease.name)\n\t\t}\n\t}\n\n\treturn leasesWithBids\n}",
            "reserveStatus": "import FIND from 0xf8d6e0586b0a20c7\n\n\n//Check the status of a fin user\npub fun main(user: Address) : [FIND.LeaseInformation] {\n\n\tlet account=getAccount(user)\n\tlet leaseCap = account.getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\n\tlet leases=leaseCap.borrow()?.getLeaseInformation() ?? []\n\n\tvar leasesWithBids :[FIND.LeaseInformation] =[]\n\tfor lease in leases {\n\t\tif lease.latestBidBy != nil {\n\t\t\tleasesWithBids.append(lease)\n\t\t}\n\t}\n\n\treturn leasesWithBids\n}",
            "status": "import FIND from 0xf8d6e0586b0a20c7\nimport Profile from 0xf8d6e0586b0a20c7\n\n//Check the status of a fin user\npub fun main(name: String) :  \u0026{Profile.Public}? {\n    return FIND.lookup(name)\n}"
         },
         "transactions": {
            "bid": "import FIND from 0xf8d6e0586b0a20c7\nimport FungibleToken from 0xee82856bf20e2aa6\nimport FUSD from 0xf8d6e0586b0a20c7\n\ntransaction(name: String, amount: UFix64) {\n\tprepare(account: AuthAccount) {\n\n\t\tlet vaultRef = account.borrow\u003c\u0026FUSD.Vault\u003e(from: /storage/fusdVault) ?? panic(\"Could not borrow reference to the fusdVault!\")\n\t\t \n\t\tlet fusdReceiver = account.getCapability\u003c\u0026{FungibleToken.Receiver}\u003e(/public/fusdReceiver)\n\n\t\tlet leaseCollection = account.getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\t\tif !leaseCollection.check() {\n\t\t\taccount.unlink(FIND.LeasePublicPath)\n\t\t\tdestroy \u003c- account.load\u003c@AnyResource\u003e(from:FIND.LeaseStoragePath)\n\t\t\taccount.save(\u003c- FIND.createEmptyLeaseCollection(), to: FIND.LeaseStoragePath)\n\t\t\taccount.link\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e( FIND.LeasePublicPath, target: FIND.LeaseStoragePath)\n\t\t}\n\n\t\tlet bidCollection = account.getCapability\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e(FIND.BidPublicPath)\n\t\tif !bidCollection.check() {\n\t\t\taccount.unlink(FIND.BidPublicPath)\n\t\t\tdestroy \u003c- account.load\u003c@AnyResource\u003e(from:FIND.BidStoragePath)\n\t\t\taccount.save(\u003c- FIND.createEmptyBidCollection(receiver: fusdReceiver, leases: leaseCollection), to: FIND.BidStoragePath)\n\t\t\taccount.link\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e( FIND.BidPublicPath, target: FIND.BidStoragePath)\n\t\t}\n\n\t\tlet vault \u003c- vaultRef.withdraw(amount: amount) as! @FUSD.Vault\n\t\tlet bids = account.borrow\u003c\u0026FIND.BidCollection\u003e(from: FIND.BidStoragePath)!\n\t\tbids.bid(name: name, vault: \u003c- vault)\n\n\t}\n}",
            "bidProfile": "import FIND from 0xf8d6e0586b0a20c7\nimport FungibleToken from 0xee82856bf20e2aa6\nimport Profile from 0xf8d6e0586b0a20c7\nimport FUSD from 0xf8d6e0586b0a20c7\n\ntransaction(name: String, amount: UFix64) {\n\tprepare(account: AuthAccount) {\n\n\n\t\t//Add exising FUSD or create a new one and add it\n\t\tlet fusdReceiver = account.getCapability\u003c\u0026{FungibleToken.Receiver}\u003e(/public/fusdReceiver)\n\t\tif !fusdReceiver.check() {\n\t\t\tlet fusd \u003c- FUSD.createEmptyVault()\n\t\t\taccount.save(\u003c- fusd, to: /storage/fusdVault)\n\t\t\taccount.link\u003c\u0026FUSD.Vault{FungibleToken.Receiver}\u003e( /public/fusdReceiver, target: /storage/fusdVault)\n\t\t\taccount.link\u003c\u0026FUSD.Vault{FungibleToken.Balance}\u003e( /public/fusdBalance, target: /storage/fusdVault)\n\t\t}\n\n\t\tlet leaseCollection = account.getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\t\tif !leaseCollection.check() {\n\t\t\taccount.unlink(FIND.LeasePublicPath)\n\t\t\tdestroy \u003c- account.load\u003c@AnyResource\u003e(from:FIND.LeaseStoragePath)\n\n\t\t\taccount.save(\u003c- FIND.createEmptyLeaseCollection(), to: FIND.LeaseStoragePath)\n\t\t\taccount.link\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e( FIND.LeasePublicPath, target: FIND.LeaseStoragePath)\n\t\t}\n\n\t\tlet bidCollection = account.getCapability\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e(FIND.BidPublicPath)\n\t\tif !bidCollection.check() {\n\t\t\taccount.unlink(FIND.BidPublicPath)\n\t\t\tdestroy \u003c- account.load\u003c@AnyResource\u003e(from:FIND.BidStoragePath)\n\n\t\t\taccount.save(\u003c- FIND.createEmptyBidCollection(receiver: fusdReceiver, leases: leaseCollection), to: FIND.BidStoragePath)\n\t\t\taccount.link\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e( FIND.BidPublicPath, target: FIND.BidStoragePath)\n\t\t}\n\n\t\tlet profileCap = account.getCapability\u003c\u0026{Profile.Public}\u003e(Profile.publicPath)\n\t\tif !profileCap.check() {\n\t\t\taccount.unlink(Profile.publicPath)\n\t\t\tdestroy \u003c- account.load\u003c@AnyResource\u003e(from:Profile.storagePath)\n\n\t\t\tlet profile \u003c-Profile.createUser(name:name, createdAt: \"find\")\n\n\t\t\tlet fusdWallet=Profile.Wallet( name:\"FUSD\", receiver:fusdReceiver, balance:account.getCapability\u003c\u0026{FungibleToken.Balance}\u003e(/public/fusdBalance), accept: Type\u003c@FUSD.Vault\u003e(), names: [\"fusd\", \"stablecoin\"])\n\n\t\t\tprofile.addWallet(fusdWallet)\n\t\t\tprofile.addCollection(Profile.ResourceCollection(\"FINDLeases\",leaseCollection, Type\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(), [\"find\", \"leases\"]))\n\t\t\tprofile.addCollection(Profile.ResourceCollection(\"FINDBids\", bidCollection, Type\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e(), [\"find\", \"bids\"]))\n\n\t\t\taccount.save(\u003c-profile, to: Profile.storagePath)\n\t\t\taccount.link\u003c\u0026Profile.User{Profile.Public}\u003e(Profile.publicPath, target: Profile.storagePath)\n\t\t\taccount.link\u003c\u0026{FungibleToken.Receiver}\u003e(Profile.publicReceiverPath, target: Profile.storagePath)\n\t\t}\n\n\t\tlet vaultRef = account.borrow\u003c\u0026FUSD.Vault\u003e(from: /storage/fusdVault) ?? panic(\"Could not borrow reference to the fusdVault!\")\n\t\tlet vault \u003c- vaultRef.withdraw(amount: amount) as! @FUSD.Vault\n\t\tlet bids = account.borrow\u003c\u0026FIND.BidCollection\u003e(from: FIND.BidStoragePath)!\n\t\tbids.bid(name: name, vault: \u003c- vault)\n\n\t}\n}",
            "cancelAuction": "import FIND from 0xf8d6e0586b0a20c7\n\ntransaction(name: String) {\n\tprepare(account: AuthAccount) {\n\n\t\tlet finLeases= account.borrow\u003c\u0026FIND.LeaseCollection\u003e(from:FIND.LeaseStoragePath)!\n\t\tfinLeases.cancel(name)\n\t\tfinLeases.delistAuction(name)\n\n\t}\n}",
            "cancelBid": "import FIND from 0xf8d6e0586b0a20c7\n\ntransaction(name: String) {\n\tprepare(account: AuthAccount) {\n\t\tlet bids = account.borrow\u003c\u0026FIND.BidCollection\u003e(from: FIND.BidStoragePath)!\n\t\tbids.cancelBid(name)\n\t}\n}",
            "createProfile": "import FungibleToken from 0xee82856bf20e2aa6\nimport FUSD from 0xf8d6e0586b0a20c7\nimport FlowToken from 0x0ae53cb6e3f42a79\nimport FIND from 0xf8d6e0586b0a20c7\nimport Profile from 0xf8d6e0586b0a20c7\n\n\n//really not sure on how to input links here.)\ntransaction(name: String) {\n\tprepare(acct: AuthAccount) {\n\t\t//if we do not have a profile it might be stored under a different address so we will just remove it\n\t\tlet profileCap = acct.getCapability\u003c\u0026{Profile.Public}\u003e(Profile.publicPath)\n\t\tif !profileCap.check() {\n\t\t\tacct.unlink(Profile.publicPath)\n\t\t\tdestroy \u003c- acct.load\u003c@AnyResource\u003e(from:Profile.storagePath)\n\t\t}\n\n\t\t//TODO we already have a profile\n\t\tif profileCap.check() {\n\t\t\treturn \n\t\t}\n\n\t\tlet profile \u003c-Profile.createUser(name:name, createdAt: \"find\")\n\n\t\t//Add exising FUSD or create a new one and add it\n\t\tlet fusdReceiver = acct.getCapability\u003c\u0026{FungibleToken.Receiver}\u003e(/public/fusdReceiver)\n\t\tif !fusdReceiver.check() {\n\t\t\tlet fusd \u003c- FUSD.createEmptyVault()\n\t\t\tacct.save(\u003c- fusd, to: /storage/fusdVault)\n\t\t\tacct.link\u003c\u0026FUSD.Vault{FungibleToken.Receiver}\u003e( /public/fusdReceiver, target: /storage/fusdVault)\n\t\t\tacct.link\u003c\u0026FUSD.Vault{FungibleToken.Balance}\u003e( /public/fusdBalance, target: /storage/fusdVault)\n\t\t}\n\n\t\tlet fusdWallet=Profile.Wallet(\n\t\t\tname:\"FUSD\", \n\t\t\treceiver:acct.getCapability\u003c\u0026{FungibleToken.Receiver}\u003e(/public/fusdReceiver),\n\t\t\tbalance:acct.getCapability\u003c\u0026{FungibleToken.Balance}\u003e(/public/fusdBalance),\n\t\t\taccept: Type\u003c@FUSD.Vault\u003e(),\n\t\t\tnames: [\"fusd\", \"stablecoin\"]\n\t\t)\n\n\t\tprofile.addWallet(fusdWallet)\n\n\n\t\tlet flowWallet=Profile.Wallet(\n\t\t\tname:\"Flow\", \n\t\t\treceiver:acct.getCapability\u003c\u0026{FungibleToken.Receiver}\u003e(/public/flowTokenReceiver),\n\t\t\tbalance:acct.getCapability\u003c\u0026{FungibleToken.Balance}\u003e(/public/flowTokenBalance),\n\t\t\taccept: Type\u003c@FlowToken.Vault\u003e(),\n\t\t\tnames: [\"flow\"]\n\t\t)\n\t\tprofile.addWallet(flowWallet)\n\t\tlet leaseCollection = acct.getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\t\tif !leaseCollection.check() {\n\t\t\tacct.unlink(FIND.LeasePublicPath)\n\t\t\tdestroy \u003c- acct.load\u003c@AnyResource\u003e(from:FIND.LeaseStoragePath)\n\t\t\tacct.save(\u003c- FIND.createEmptyLeaseCollection(), to: FIND.LeaseStoragePath)\n\t\t\tacct.link\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e( FIND.LeasePublicPath, target: FIND.LeaseStoragePath)\n\t\t}\n\t\tprofile.addCollection(Profile.ResourceCollection(\"FINDLeases\",leaseCollection, Type\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(), [\"find\", \"leases\"]))\n\n\t\tlet bidCollection = acct.getCapability\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e(FIND.BidPublicPath)\n\t\tif !bidCollection.check() {\n\t\t\tacct.unlink(FIND.BidPublicPath)\n\t\t\tdestroy \u003c- acct.load\u003c@AnyResource\u003e(from:FIND.BidStoragePath)\n\t\t\tacct.save(\u003c- FIND.createEmptyBidCollection(receiver: fusdReceiver, leases: leaseCollection), to: FIND.BidStoragePath)\n\t\t\tacct.link\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e( FIND.BidPublicPath, target: FIND.BidStoragePath)\n\t\t}\n\t\tprofile.addCollection(Profile.ResourceCollection( \"FINDBids\", bidCollection, Type\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e(), [\"find\", \"bids\"]))\n\n\t\tacct.save(\u003c-profile, to: Profile.storagePath)\n\t\tacct.link\u003c\u0026Profile.User{Profile.Public}\u003e(Profile.publicPath, target: Profile.storagePath)\n\t\tacct.link\u003c\u0026{FungibleToken.Receiver}\u003e(Profile.publicReceiverPath, target: Profile.storagePath)\n\n\t}\n}",
            "delistSale": "import FIND from 0xf8d6e0586b0a20c7\n\ntransaction(name: String) {\n\tprepare(acct: AuthAccount) {\n\t\tlet finLeases= acct.borrow\u003c\u0026FIND.LeaseCollection\u003e(from:FIND.LeaseStoragePath)!\n\t\tfinLeases.delistSale(name)\n\t}\n}",
            "editProfile": "import FungibleToken from 0xee82856bf20e2aa6\nimport FUSD from 0xf8d6e0586b0a20c7\nimport FlowToken from 0x0ae53cb6e3f42a79\nimport FIND from 0xf8d6e0586b0a20c7\nimport Profile from 0xf8d6e0586b0a20c7\n\n\ntransaction(name:String, description: String, avatar: String, tags:[String], allowStoringFollowers: Bool, links: [{String: String}]) {\n\tprepare(acct: AuthAccount) {\n\n\t\tlet profile =acct.borrow\u003c\u0026Profile.User\u003e(from:Profile.storagePath)!\n\n\t\t//Add exising FUSD or create a new one and add it\n\t\tlet fusdReceiver = acct.getCapability\u003c\u0026{FungibleToken.Receiver}\u003e(/public/fusdReceiver)\n\t\tif !fusdReceiver.check() {\n\t\t\tlet fusd \u003c- FUSD.createEmptyVault()\n\t\t\tacct.save(\u003c- fusd, to: /storage/fusdVault)\n\t\t\tacct.link\u003c\u0026FUSD.Vault{FungibleToken.Receiver}\u003e( /public/fusdReceiver, target: /storage/fusdVault)\n\t\t\tacct.link\u003c\u0026FUSD.Vault{FungibleToken.Balance}\u003e( /public/fusdBalance, target: /storage/fusdVault)\n\t\t}\n\n\n\t\tvar hasFusdWallet=false\n\t\tvar hasFlowWallet=false\n\t\tlet wallets=profile.getWallets()\n\t\tfor wallet in wallets {\n\t\t\tif wallet.name==\"FUSD\" {\n\t\t\t\thasFusdWallet=true\n\t\t\t}\n\n\t\t\tif wallet.name ==\"Flow\" {\n\t\t\t\thasFlowWallet=true\n\t\t\t}\n\t\t}\n\n\t\tif !hasFlowWallet {\n\t\t\tlet flowWallet=Profile.Wallet(\n\t\t\t\tname:\"Flow\", \n\t\t\t\treceiver:acct.getCapability\u003c\u0026{FungibleToken.Receiver}\u003e(/public/flowTokenReceiver),\n\t\t\t\tbalance:acct.getCapability\u003c\u0026{FungibleToken.Balance}\u003e(/public/flowTokenBalance),\n\t\t\t\taccept: Type\u003c@FlowToken.Vault\u003e(),\n\t\t\t\tnames: [\"flow\"]\n\t\t\t)\n\t\t\tprofile.addWallet(flowWallet)\n\t\t}\n\n\t\tif !hasFusdWallet {\n\t\t\tlet fusdWallet=Profile.Wallet(\n\t\t\t\tname:\"FUSD\", \n\t\t\t\treceiver:acct.getCapability\u003c\u0026{FungibleToken.Receiver}\u003e(/public/fusdReceiver),\n\t\t\t\tbalance:acct.getCapability\u003c\u0026{FungibleToken.Balance}\u003e(/public/fusdBalance),\n\t\t\t\taccept: Type\u003c@FUSD.Vault\u003e(),\n\t\t\t\tnames: [\"fusd\", \"stablecoin\"]\n\t\t\t)\n\t\t\tprofile.addWallet(fusdWallet)\n\t\t}\n\n\t\tprofile.setName(name)\n\t\tprofile.setDescription(description)\n\t\tprofile.setAvatar(avatar)\n\n\t\tlet existingTags=profile.setTags(tags)\n\n\t\tlet oldLinks=profile.getLinks()\n\n\t\tfor link in links {\n\t\t\tif !link.containsKey(\"title\") {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif link[\"remove\"] == \"true\" {\n\t\t\t\tprofile.removeLink(link[\"title\"]!)\t\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tprofile.addLink(Profile.Link(title: link[\"title\"]!, type: link[\"type\"]!, url: link[\"url\"]!))\n\t\t}\n\t}\n}",
            "fulfill": "import FIND from 0xf8d6e0586b0a20c7\n\ntransaction(name: String) {\n\tprepare(account: AuthAccount) {\n\n\t\tlet finLeases= account.borrow\u003c\u0026FIND.LeaseCollection\u003e(from:FIND.LeaseStoragePath)!\n\t\tfinLeases.fulfill(name)\n\n\t}\n}",
            "fulfillAuction": "import FIND from 0xf8d6e0586b0a20c7\n\ntransaction(owner: Address, name: String) {\n\tprepare(account: AuthAccount) {\n\n\t\tlet leaseCollection = getAccount(owner).getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\t\tleaseCollection.borrow()!.fulfillAuction(name)\n\n\t}\n}",
            "fulfillAuctionBidder": "import FIND from 0xf8d6e0586b0a20c7\nimport FungibleToken from 0xee82856bf20e2aa6\nimport FUSD from 0xf8d6e0586b0a20c7\nimport Profile from 0xf8d6e0586b0a20c7\n\ntransaction(owner: Address, name: String) {\n\tprepare(acct: AuthAccount) {\n\n\n\t//Add exising FUSD or create a new one and add it\n\t\tlet fusdReceiver = acct.getCapability\u003c\u0026{FungibleToken.Receiver}\u003e(/public/fusdReceiver)\n\t\tif !fusdReceiver.check() {\n\t\t\tlet fusd \u003c- FUSD.createEmptyVault()\n\t\t\tacct.save(\u003c- fusd, to: /storage/fusdVault)\n\t\t\tacct.link\u003c\u0026FUSD.Vault{FungibleToken.Receiver}\u003e( /public/fusdReceiver, target: /storage/fusdVault)\n\t\t\tacct.link\u003c\u0026FUSD.Vault{FungibleToken.Balance}\u003e( /public/fusdBalance, target: /storage/fusdVault)\n\t\t}\n\n\t\tlet leaseCollection = acct.getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\t\tif !leaseCollection.check() {\n\t\t\tacct.unlink(FIND.LeasePublicPath)\n\t\t\tdestroy \u003c- acct.load\u003c@AnyResource\u003e(from:FIND.LeaseStoragePath)\n\n\t\t\tacct.save(\u003c- FIND.createEmptyLeaseCollection(), to: FIND.LeaseStoragePath)\n\t\t\tacct.link\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e( FIND.LeasePublicPath, target: FIND.LeaseStoragePath)\n\t\t}\n\n\t\tlet bidCollection = acct.getCapability\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e(FIND.BidPublicPath)\n\t\tif !bidCollection.check() {\n\t\t\tacct.unlink(FIND.BidPublicPath)\n\t\t\tdestroy \u003c- acct.load\u003c@AnyResource\u003e(from:FIND.BidStoragePath)\n\n\t\t\tacct.save(\u003c- FIND.createEmptyBidCollection(receiver: fusdReceiver, leases: leaseCollection), to: FIND.BidStoragePath)\n\t\t\tacct.link\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e( FIND.BidPublicPath, target: FIND.BidStoragePath)\n\t\t}\n\n\t\tlet profileCap = acct.getCapability\u003c\u0026{Profile.Public}\u003e(Profile.publicPath)\n\t\tif !profileCap.check() {\n\t\t\tacct.unlink(Profile.publicPath)\n\t\t\tdestroy \u003c- acct.load\u003c@AnyResource\u003e(from:Profile.storagePath)\n\n\t\t\tlet profile \u003c-Profile.createUser(name:name, createdAt: \"find\")\n\n\t\t\tlet fusdWallet=Profile.Wallet( name:\"FUSD\", receiver:fusdReceiver, balance:acct.getCapability\u003c\u0026{FungibleToken.Balance}\u003e(/public/fusdBalance), accept: Type\u003c@FUSD.Vault\u003e(), names: [\"fusd\", \"stablecoin\"])\n\n\t\t\tprofile.addWallet(fusdWallet)\n\t\t\tprofile.addCollection(Profile.ResourceCollection(\"FINDLeases\",leaseCollection, Type\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(), [\"find\", \"leases\"]))\n\t\t\tprofile.addCollection(Profile.ResourceCollection(\"FINDBids\", bidCollection, Type\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e(), [\"find\", \"bids\"]))\n\n\t\t\tacct.save(\u003c-profile, to: Profile.storagePath)\n\t\t\tacct.link\u003c\u0026Profile.User{Profile.Public}\u003e(Profile.publicPath, target: Profile.storagePath)\n\t\t\tacct.link\u003c\u0026{FungibleToken.Receiver}\u003e(Profile.publicReceiverPath, target: Profile.storagePath)\n\t\t}\n\n\t\tlet leaseCollectionOwner = getAccount(owner).getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\t\tleaseCollectionOwner.borrow()!.fulfillAuction(name)\n\n\t}\n}",
            "increaseBid": "import FIND from 0xf8d6e0586b0a20c7\nimport FungibleToken from 0xee82856bf20e2aa6\nimport FUSD from 0xf8d6e0586b0a20c7\n\ntransaction(name: String, amount: UFix64) {\n\tprepare(account: AuthAccount) {\n\n\t\tlet vaultRef = account.borrow\u003c\u0026FUSD.Vault\u003e(from: /storage/fusdVault) ?? panic(\"Could not borrow reference to the fusdVault!\")\n\t\t\n\t\tlet fusdReceiver = account.getCapability\u003c\u0026{FungibleToken.Receiver}\u003e(/public/fusdReceiver)\n\n\t\tlet leaseCollection = account.getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\t\tif !leaseCollection.check() {\n\t\t\taccount.save(\u003c- FIND.createEmptyLeaseCollection(), to: FIND.LeaseStoragePath)\n\t\t\taccount.link\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e( FIND.LeasePublicPath, target: FIND.LeaseStoragePath)\n\t\t}\n\n\t\tlet bidCollection = account.getCapability\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e(FIND.BidPublicPath)\n\t\tif !bidCollection.check() {\n\t\t\taccount.save(\u003c- FIND.createEmptyBidCollection(receiver: fusdReceiver, leases: leaseCollection), to: FIND.BidStoragePath)\n\t\t\taccount.link\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e( FIND.BidPublicPath, target: FIND.BidStoragePath)\n\t\t}\n\n\n\t\tlet vault \u003c- vaultRef.withdraw(amount: amount) as! @FUSD.Vault\n\t\tlet bids = account.borrow\u003c\u0026FIND.BidCollection\u003e(from: FIND.BidStoragePath)!\n\t\tbids.increaseBid(name: name, vault: \u003c- vault)\n\n\t}\n}",
            "listForAuction": "import FIND from 0xf8d6e0586b0a20c7\n\ntransaction(name: String, auctionStartPrice: UFix64, auctionReservePrice: UFix64, auctionDuration: UFix64, auctionExtensionOnLateBid: UFix64) {\n\tprepare(acct: AuthAccount) {\n\t\tlet finLeases= acct.borrow\u003c\u0026FIND.LeaseCollection\u003e(from:FIND.LeaseStoragePath)!\n\t\tfinLeases.listForAuction(name: name, auctionStartPrice: auctionStartPrice, auctionReservePrice: auctionReservePrice, auctionDuration: auctionDuration,  auctionExtensionOnLateBid: auctionExtensionOnLateBid)\n\n\t}\n}",
            "listForSale": "import FIND from 0xf8d6e0586b0a20c7\n\ntransaction(name: String, directSellPrice:UFix64) {\n\tprepare(acct: AuthAccount) {\n\t\tlet finLeases= acct.borrow\u003c\u0026FIND.LeaseCollection\u003e(from:FIND.LeaseStoragePath)!\n\t\tfinLeases.listForSale(name: name,  directSellPrice:directSellPrice)\n\t}\n}",
            "moveNameToAddress": "import FungibleToken from 0xee82856bf20e2aa6\nimport FUSD from 0xf8d6e0586b0a20c7\nimport FlowToken from 0x0ae53cb6e3f42a79\nimport Profile from 0xf8d6e0586b0a20c7\nimport FIND from 0xf8d6e0586b0a20c7\n\n\ntransaction(name: String, receiverAddress:Address) {\n\n\n\tlet receiverAddress:Address\n\tlet sender : \u0026FIND.LeaseCollection\n\n\tprepare(acct: AuthAccount) {\n\t\tself.sender= acct.borrow\u003c\u0026FIND.LeaseCollection\u003e(from:FIND.LeaseStoragePath)!\n\t\tself.receiverAddress=receiverAddress\n\t} \n\n\texecute {\n\t\tlet receiver=getAccount(self.receiverAddress)\n\t\tlet receiverLease = receiver.getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\t\tlet receiverProfile = receiver.getCapability\u003c\u0026{Profile.Public}\u003e(Profile.publicPath)\n\n\t\tself.sender.move(name:name, profile:receiverProfile, to: receiverLease)\n\t}\n}",
            "moveNameToName": "import FungibleToken from 0xee82856bf20e2aa6\nimport FUSD from 0xf8d6e0586b0a20c7\nimport FlowToken from 0x0ae53cb6e3f42a79\nimport Profile from 0xf8d6e0586b0a20c7\nimport FIND from 0xf8d6e0586b0a20c7\n\n\ntransaction(name: String, receiverName: String) {\n\n\n\tlet receiverAddress:Address\n\tlet sender : \u0026FIND.LeaseCollection\n\n\tprepare(acct: AuthAccount) {\n\n\t\tself.sender= acct.borrow\u003c\u0026FIND.LeaseCollection\u003e(from:FIND.LeaseStoragePath)!\n\t\tself.receiverAddress=FIND.lookupAddress(receiverName) ?? panic(\"cannot resolve address\")\n\n\t} \n\n\texecute {\n\t\tlet receiver=getAccount(self.receiverAddress)\n\t\tlet receiverLease = receiver.getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\t\tlet receiverProfile = receiver.getCapability\u003c\u0026{Profile.Public}\u003e(Profile.publicPath)\n\n\t\tself.sender.move(name:name, profile:receiverProfile, to: receiverLease)\n\t}\n\n\n\n}",
            "register": "import FungibleToken from 0xee82856bf20e2aa6\nimport FUSD from 0xf8d6e0586b0a20c7\nimport FlowToken from 0x0ae53cb6e3f42a79\nimport Profile from 0xf8d6e0586b0a20c7\nimport FIND from 0xf8d6e0586b0a20c7\n\ntransaction(name: String, amount: UFix64) {\n\tprepare(acct: AuthAccount) {\n\n\t\t//Add exising FUSD or create a new one and add it\n\t\tlet fusdReceiver = acct.getCapability\u003c\u0026{FungibleToken.Receiver}\u003e(/public/fusdReceiver)\n\t\tif !fusdReceiver.check() {\n\t\t\tlet fusd \u003c- FUSD.createEmptyVault()\n\t\t\tacct.save(\u003c- fusd, to: /storage/fusdVault)\n\t\t\tacct.link\u003c\u0026FUSD.Vault{FungibleToken.Receiver}\u003e( /public/fusdReceiver, target: /storage/fusdVault)\n\t\t\tacct.link\u003c\u0026FUSD.Vault{FungibleToken.Balance}\u003e( /public/fusdBalance, target: /storage/fusdVault)\n\t\t}\n\n\t\tlet leaseCollection = acct.getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\t\tif !leaseCollection.check() {\n\t\t\tacct.unlink(FIND.LeasePublicPath)\n\t\t\tdestroy \u003c- acct.load\u003c@AnyResource\u003e(from:FIND.LeaseStoragePath)\n\n\t\t\tacct.save(\u003c- FIND.createEmptyLeaseCollection(), to: FIND.LeaseStoragePath)\n\t\t\tacct.link\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e( FIND.LeasePublicPath, target: FIND.LeaseStoragePath)\n\n\t\t}\n\n\t\tlet bidCollection = acct.getCapability\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e(FIND.BidPublicPath)\n\t\tif !bidCollection.check() {\n\t\t\tacct.unlink(FIND.BidPublicPath)\n\t\t\tdestroy \u003c- acct.load\u003c@AnyResource\u003e(from:FIND.BidStoragePath)\n\n\t\t\tacct.save(\u003c- FIND.createEmptyBidCollection(receiver: fusdReceiver, leases: leaseCollection), to: FIND.BidStoragePath)\n\t\t\tacct.link\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e( FIND.BidPublicPath, target: FIND.BidStoragePath)\n\t\t}\n\n\t\tlet profileCap = acct.getCapability\u003c\u0026{Profile.Public}\u003e(Profile.publicPath)\n\t\tif !profileCap.check() {\n\t\t\tacct.unlink(Profile.publicPath)\n\t\t\tdestroy \u003c- acct.load\u003c@AnyResource\u003e(from:Profile.storagePath)\n\n\t\t\tlet profile \u003c-Profile.createUser(name:name, createdAt: \"find\")\n\n\t\t\tlet fusdWallet=Profile.Wallet( name:\"FUSD\", receiver:fusdReceiver, balance:acct.getCapability\u003c\u0026{FungibleToken.Balance}\u003e(/public/fusdBalance), accept: Type\u003c@FUSD.Vault\u003e(), names: [\"fusd\", \"stablecoin\"])\n\n\t\t\tlet flowWallet=Profile.Wallet(\n\t\t\t\tname:\"Flow\", \n\t\t\t\treceiver:acct.getCapability\u003c\u0026{FungibleToken.Receiver}\u003e(/public/flowTokenReceiver),\n\t\t\t\tbalance:acct.getCapability\u003c\u0026{FungibleToken.Balance}\u003e(/public/flowTokenBalance),\n\t\t\t\taccept: Type\u003c@FlowToken.Vault\u003e(),\n\t\t\t\tnames: [\"flow\"]\n\t\t\t)\n\t\n\t\t\tprofile.addWallet(flowWallet)\n\t\t\tprofile.addWallet(fusdWallet)\n\t\t\tprofile.addCollection(Profile.ResourceCollection(\"FINDLeases\",leaseCollection, Type\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(), [\"find\", \"leases\"]))\n\t\t\tprofile.addCollection(Profile.ResourceCollection(\"FINDBids\", bidCollection, Type\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e(), [\"find\", \"bids\"]))\n\n\t\t\tacct.save(\u003c-profile, to: Profile.storagePath)\n\t\t\tacct.link\u003c\u0026Profile.User{Profile.Public}\u003e(Profile.publicPath, target: Profile.storagePath)\n\t\t\tacct.link\u003c\u0026{FungibleToken.Receiver}\u003e(Profile.publicReceiverPath, target: Profile.storagePath)\n\t\t}\n\n\t\tlet price=FIND.calculateCost(name)\n\t\tif price != amount {\n\t\t\tpanic(\"Calculated cost does not match expected cost\")\n\t\t}\n\t\tlog(\"The cost for registering this name is \".concat(price.toString()))\n\n\t\tlet vaultRef = acct.borrow\u003c\u0026FUSD.Vault\u003e(from: /storage/fusdVault) ?? panic(\"Could not borrow reference to the fusdVault!\")\n\n\t\tlet payVault \u003c- vaultRef.withdraw(amount: price) as! @FUSD.Vault\n\n\t\tlet leases=acct.borrow\u003c\u0026FIND.LeaseCollection\u003e(from: FIND.LeaseStoragePath)!\n\t\tleases.register(name: name, vault: \u003c- payVault)\n\n\t}\n}",
            "rejectDirectOffer": "import FIND from 0xf8d6e0586b0a20c7\n\ntransaction(name: String) {\n\tprepare(account: AuthAccount) {\n\n\t\tlet finLeases= account.borrow\u003c\u0026FIND.LeaseCollection\u003e(from:FIND.LeaseStoragePath)!\n\t\tfinLeases.cancel(name)\n\n\t}\n}",
            "removeProfile": "import Profile from 0xf8d6e0586b0a20c7\nimport FIND from 0xf8d6e0586b0a20c7\n\ntransaction() {\n\tprepare(acct: AuthAccount) {\n\t\t\tacct.unlink(Profile.publicPath)\n\t\t\tdestroy \u003c- acct.load\u003c@AnyResource\u003e(from:Profile.storagePath)\n\n\t\t\tacct.unlink(FIND.BidPublicPath)\n\t\t\tdestroy \u003c- acct.load\u003c@AnyResource\u003e(from:FIND.BidStoragePath)\n\n\t\t\tacct.unlink(FIND.LeasePublicPath)\n\t\t\tdestroy \u003c- acct.load\u003c@AnyResource\u003e(from:FIND.LeaseStoragePath)\n\t}\n}",
            "renew": "import FungibleToken from 0xee82856bf20e2aa6\nimport FUSD from 0xf8d6e0586b0a20c7\nimport Profile from 0xf8d6e0586b0a20c7\nimport FIND from 0xf8d6e0586b0a20c7\n\ntransaction(name: String, amount: UFix64) {\n\tprepare(acct: AuthAccount) {\n\n\t\tlet profileCap = acct.getCapability\u003c\u0026{Profile.Public}\u003e(Profile.publicPath)\n\n\t\tlet price=FIND.calculateCost(name)\n\t\tif amount != price {\n\t\t\tpanic(\"expected renew cost is not the same as calculated renew cost\")\n\t\t}\n\t\tlet vaultRef = acct.borrow\u003c\u0026FUSD.Vault\u003e(from: /storage/fusdVault) ?? panic(\"Could not borrow reference to the fusdVault!\")\n\t\tlet payVault \u003c- vaultRef.withdraw(amount: price) as! @FUSD.Vault\n\n\t\tlet finLeases= acct.borrow\u003c\u0026FIND.LeaseCollection\u003e(from:FIND.LeaseStoragePath)!\n\t\tlet finToken= finLeases.borrow(name)\n\t\tfinToken.extendLease(\u003c- payVault)\n\t}\n}",
            "sendFT": "import FUSD from 0xf8d6e0586b0a20c7\nimport FlowToken from 0x0ae53cb6e3f42a79\nimport FIND from 0xf8d6e0586b0a20c7\n\ntransaction(name: String, amount: UFix64, type: String) {\n\n    prepare(account: AuthAccount) {\n\n\t\t\t  if type == \"fusd\" {\n\t\t\t\t\tlet vaultRef = account.borrow\u003c\u0026FUSD.Vault\u003e(from: /storage/fusdVault) ?? panic(\"Could not borrow reference to the fusdVault!\")\n\t\t\t\t\tFIND.deposit(to: name, from: \u003c- vaultRef.withdraw(amount: amount))\n\t\t\t\t\treturn \n\t\t\t\t}\n\n\t\t\t\tlet vaultRef = account.borrow\u003c\u0026FlowToken.Vault\u003e(from: /storage/flowTokenVault) ?? panic(\"Could not borrow reference to the fusdVault!\")\n\t\t\t\tFIND.deposit(to: name, from: \u003c- vaultRef.withdraw(amount: amount))\n\n    }\n\n}",
            "setProfile": "import Profile from 0xf8d6e0586b0a20c7\n\n\ntransaction(avatar: String) {\n\tprepare(acct: AuthAccount) {\n\t\tlet profile =acct.borrow\u003c\u0026Profile.User\u003e(from:Profile.storagePath)!\n\t\tprofile.setAvatar(avatar)\n\t}\n}",
            "startAuction": "import FIND from 0xf8d6e0586b0a20c7\n\ntransaction(name: String) {\n\tprepare(account: AuthAccount) {\n\n\t\tlet finLeases= account.borrow\u003c\u0026FIND.LeaseCollection\u003e(from:FIND.LeaseStoragePath)!\n\t\tfinLeases.startAuction(name)\n\n\t}\n}"
         }
      },
      "mainnet": {
         "scripts": {
            "address_status": "import FIND from 0x097bafa4e0b48eef\nimport Profile from 0x097bafa4e0b48eef\n\npub struct FINDReport{\n\tpub let profile:Profile.UserProfile?\n\tpub let bids: [FIND.BidInfo]\n\tpub let leases: [FIND.LeaseInformation]\n\n\tinit(profile: Profile.UserProfile?, bids: [FIND.BidInfo], leases : [FIND.LeaseInformation]) {\n\t\tself.profile=profile\n\t\tself.bids=bids\n\t\tself.leases=leases\n\t}\n}\n\n//Check the status of a fin user\npub fun main(user: Address) : FINDReport{\n\n\tlet account=getAccount(user)\n\tlet bidCap = account.getCapability\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e(FIND.BidPublicPath)\n\n\tlet leaseCap = account.getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\n\treturn FINDReport(\n\t\tprofile: account.getCapability\u003c\u0026{Profile.Public}\u003e(Profile.publicPath).borrow()?.asProfile(),\n\t\tbids: bidCap.borrow()?.getBids() ?? [],\n\t\tleases: leaseCap.borrow()?.getLeaseInformation() ?? []\n\t)\n\n}",
            "collections": "import NonFungibleToken from 0x1d7e57aa55817448\n\n//mainnet\nimport Art from 0xd796ff17107bbff6\nimport Marketplace from 0xd796ff17107bbff6\nimport GooberXContract from 0x34f2bf4a80bb0f69\nimport Flovatar from 0x921ea449dffec68a\nimport FlovatarMarketplace from  0x921ea449dffec68a\nimport RareRooms_NFT from 0x329feb3ab062d289\nimport MotoGPCard from 0xa49cc0ee46c54bfb\nimport Gaia from 0x8b148183c28ff88f\nimport ChainmonstersRewards from 0x93615d25d14fa337\n\n\npub struct MetadataCollection{\n\tpub let type: String\n\tpub let items: [MetadataCollectionItem]\n\n\tinit(type:String, items: [MetadataCollectionItem]) {\n\t\tself.type=type\n\t\tself.items=items\n\t}\n}\n\n\npub struct MetadataCollectionItem {\n\tpub let id:UInt64\n\tpub let name: String\n\tpub let image: String\n\tpub let url: String\n\tpub let listPrice: UFix64?\n\tpub let listToken: String?\n\n\n\tinit(id:UInt64, name:String, image:String, url:String, listPrice: UFix64?, listToken:String?) {\n\t\tself.id=id\n\t\tself.name=name\n\t\tself.url=url\n\t\tself.image=image\n\t\tself.listToken=listToken\n\t\tself.listPrice=listPrice\n\t}\n}\n\npub fun main(address: Address) : {String : MetadataCollection}? {\n\n\tlet account = getAccount(address)\n\tlet results : {String :  MetadataCollection}={}\n\n\tlet flovatarList= Flovatar.getFlovatars(address: address)\n\tif flovatarList.length \u003e 0 {\n\t\tlet items: [MetadataCollectionItem] = []\n\t\tfor flovatar in flovatarList  {\n\t\t\tvar name = flovatar.name\n\t\t\tif name == \"\" {\n\t\t\t\tname=\"Flovatar #\".concat(flovatar.id.toString())\n\t\t\t}\n\t\t\titems.append(MetadataCollectionItem(\n\t\t\t\tid: flovatar.id, \n\t\t\t\tname: name, \n\t\t\t\timage: \"https://flovatar.com/api/image/\".concat(flovatar.id.toString()),\n\t\t\t\turl: \"https://flovatar.com/flovatars/\".concat(flovatar.id.toString()).concat(\"/\").concat(address.toString()),\n\t\t\t\tlistPrice: nil,\n\t\t\t\tlistToken: nil\n\t\t\t))\n\t\t}\n\n\t\tresults[\"flovatar\"] = MetadataCollection(type: Type\u003c@Flovatar.Collection\u003e().identifier, items: items)\n\t}\n\n\tlet flovatarMarketDetails = FlovatarMarketplace.getFlovatarSales(address: address)\n\tif flovatarMarketDetails.length \u003e 0 {\n\t\tlet items: [MetadataCollectionItem] = []\n\t\tfor flovatar in flovatarMarketDetails  {\n\t\t\tvar\tname=\"Flovatar #\".concat(flovatar.id.toString())\n\t\t\titems.append(MetadataCollectionItem(\n\t\t\t\tid: flovatar.id, \n\t\t\t\tname: name, \n\t\t\t\timage: \"https://flovatar.com/api/image/\".concat(flovatar.id.toString()),\n\t\t\t\turl: \"https://flovatar.com/flovatars/\".concat(flovatar.id.toString()).concat(\"/\").concat(address.toString()),\n\t\t\t\tlistPrice: flovatar.price,\n\t\t\t\tlistToken: \"Flow\"\n\t\t\t))\n\t\t}\n\n\t\tif items.length != 0 {\n\t\t\tresults[\"flovatarSales\"] = MetadataCollection(type: Type\u003c@Flovatar.Collection\u003e().identifier, items: items)\n\t\t}\n\t}\n\n\tlet versusImageUrlPrefix = \"https://res.cloudinary.com/dxra4agvf/image/upload/c_fill,w_600/f_auto/maincache\"\n\tlet artList = Art.getArt(address: address)\n\tif artList.length \u003e 0 {\n\t\tlet items: [MetadataCollectionItem] = []\n\t\tfor art in artList {\n\t\t\titems.append(MetadataCollectionItem(\n\t\t\t\tid: art.id, \n\t\t\t\tname: art.metadata.name.concat(\" edition \").concat(art.metadata.edition.toString()).concat(\"/\").concat(art.metadata.maxEdition.toString()).concat(\" by \").concat(art.metadata.artist),  \n\t\t\t\timage: versusImageUrlPrefix.concat(art.cacheKey), \n\t\t\t\turl: \"https://www.versus.auction/piece/\".concat(address.toString()).concat(\"/\").concat(art.id.toString()).concat(\"/\"),\n\t\t\t\tlistPrice: nil,\n\t\t\t\tlistToken: nil\n\t\t\t))\n\t\t}\n\t\tresults[\"versus\"]= MetadataCollection(type: Type\u003c@Art.Collection\u003e().identifier, items: items)\n\t}\n\n\tlet versusMarketplace = account.getCapability\u003c\u0026{Marketplace.SalePublic}\u003e(Marketplace.CollectionPublicPath)\n\tif versusMarketplace.check() {\n\t\tlet items: [MetadataCollectionItem] = []\n\t\tlet versusMarket = versusMarketplace.borrow()!.listSaleItems()\n\t\tfor saleItem in versusMarket {\n\t\t\titems.append(MetadataCollectionItem(\n\t\t\t\tid: saleItem.id, \n\t\t\t\tname: saleItem.art.name.concat(\" edition \").concat(saleItem.art.edition.toString()).concat(\"/\").concat(saleItem.art.maxEdition.toString()).concat(\" by \").concat(saleItem.art.artist),\n\t\t\t\timage: versusImageUrlPrefix.concat(saleItem.cacheKey), \n\t\t\t\turl: \"https://www.versus.auction/listing/\".concat(saleItem.id.toString()).concat(\"/\"),\n\t\t\t\tlistPrice: saleItem.price,\n\t\t\t\tlistToken: \"Flow\"\n\t\t\t))\n\t\t}\n\t\tif items.length != 0 {\n\t\t\tresults[\"versusSale\"]= MetadataCollection(type: Type\u003c@Marketplace.SaleCollection\u003e().identifier, items: items)\n\t\t}\n\t}\n\n\n\tlet goobersCap = account.getCapability\u003c\u0026GooberXContract.Collection{NonFungibleToken.CollectionPublic, GooberXContract.GooberCollectionPublic}\u003e(GooberXContract.CollectionPublicPath)\n\n\tif goobersCap.check() {\n\t\tlet items: [MetadataCollectionItem] = []\n\t\tlet goobers = goobersCap.borrow()!.listUsersGoobers()\n\t\tfor id in goobers.keys {\n\t\t\tlet goober = goobers[id]!\n\t\t\titems.append(MetadataCollectionItem(\n\t\t\t\tid: id,\n\t\t\t\tname: \"Goober #\".concat(id.toString()),\n\t\t\t\timage: goober.uri,\n\t\t\t\turl: \"https://partymansion.io/gooberz/\".concat(id.toString()),\n\t\t\t\tlistPrice: nil,\n\t\t\t\tlistToken: nil\n\t\t\t))\n\n\t\t}\n\t\tif items.length != 0 {\n\t\t\tresults[\"goobers\"] = MetadataCollection(type: Type\u003c@GooberXContract.Collection\u003e().identifier, items: items)\n\t\t}\n\t}\n\n\n\t/*\n\tlet bbCap = account.getCapability\u003c\u0026{BasicBeast.BeastCollectionPublic}\u003e(BasicBeast.CollectionPublicPath)\n\tif bbCap.check() {\n\t\tlet items: [MetadataCollectionItem]=[]\n\t\tlet bb = bbCap.borrow()!\n\n\t\tfor bid in bb.getIDs() {\n\t\t\tlet beast = bb.borrowBeast(id: bid)!\n\t\t\tlet template=beast.data.beastTemplate\n\t\t\tlet name= beast.nickname ?? template.name\n\t\t\titems.append(MetadataCollectionItem(id:beast.id, name:name, url:template.image, ipfsHash:\"\", svg: \"\"))\n\n\t\t}\n\t\tresults[\"basicbeasts\"] = MetadataCollection(type: Type\u003c@BasicBeast.Collection\u003e().identifier, items: items)\n\t}\n\t*/\n\n\n\tlet rareRoomCollection = account.getCapability\u003c\u0026RareRooms_NFT.Collection{RareRooms_NFT.RareRooms_NFTCollectionPublic}\u003e(RareRooms_NFT.CollectionPublicPath)\n\tif rareRoomCollection.check() {\n\t\tlet rareRoomNfts = rareRoomCollection.borrow()!.getIDs()\n\t\tlet items: [MetadataCollectionItem] = []\n\t\tfor id in rareRoomNfts {\n\t\t\tlet nft = rareRoomCollection.borrow()!.borrowRareRooms_NFT(id: id)!\n\t\t\titems.append(MetadataCollectionItem(\n\t\t\t\tid: id,\n\t\t\t\tname: RareRooms_NFT.getSetMetadataByField(setId: nft.setId, field: \"name\")!,\n\t\t\t\t// we use \"preview\" and not \"image\" because of potential .glg and .mp4 file types\n\t\t\t\timage: RareRooms_NFT.getSetMetadataByField(setId: nft.setId, field: \"preview\")!,\n\t\t\t\turl: \"https://rarerooms.io/tokens/\".concat(id.toString()),\n\t\t\t\tlistPrice: nil,\n\t\t\t\tlistToken: nil\n\t\t\t))\n\t\t}\n\n\t\tif items.length != 0 {\n\t\t\tresults[\"RareRooms\"] = MetadataCollection(type: Type\u003c@RareRooms_NFT.Collection\u003e().identifier, items: items)\n\t\t}\n\t}\n\n\n\tlet motoGPCollection = account.getCapability\u003c\u0026MotoGPCard.Collection{MotoGPCard.ICardCollectionPublic}\u003e(/public/motogpCardCollection)\n\tif motoGPCollection.check() {\n\t\tlet motoGPNfts = motoGPCollection.borrow()!.getIDs()\n\t\tlet items: [MetadataCollectionItem] = []\n\t\tfor id in motoGPNfts {\n\t\t\tlet nft = motoGPCollection.borrow()!.borrowCard(id: id)!\n\t\t\tlet metadata = nft.getCardMetadata()!\n\t\t\titems.append(MetadataCollectionItem(\n\t\t\t\tid: id,\n\t\t\t\tname: metadata.name,\n\t\t\t\timage: metadata.imageUrl,\n\t\t\t\turl: \"https://motogp-ignition.com/nft/card/\".concat(id.toString()).concat(\"?owner=\").concat(address.toString()),\n\t\t\t\tlistPrice: nil,\n\t\t\t\tlistToken: nil\n\t\t\t))\n\t\t}\n\n\t\tif items.length != 0 {\n\t\t\tresults[\"MotoGP\"] = MetadataCollection(type: Type\u003c@MotoGPCard.Collection\u003e().identifier, items: items)\n\t\t}\n\t}\n\n\tlet gaiaCollection = account.getCapability\u003c\u0026{Gaia.CollectionPublic}\u003e(Gaia.CollectionPublicPath)\n\tif gaiaCollection.check() {\n\t\tlet gaiaNfts = gaiaCollection.borrow()!.getIDs()\n\t\tlet items: [MetadataCollectionItem] = []\n\t\tfor id in gaiaNfts {\n\t\t\tlet nft = gaiaCollection.borrow()!.borrowGaiaNFT(id: id)!\n\t\t\tlet metadata = Gaia.getTemplateMetaData(templateID: nft.data.templateID)!\n\t\t\titems.append(MetadataCollectionItem(\n\t\t\t\tid: id,\n\t\t\t\tname: metadata[\"title\"]!,\n\t\t\t\timage: metadata[\"img\"]!,\n\t\t\t\turl: metadata[\"uri\"]!,\n\t\t\t\tlistPrice: nil,\n\t\t\t\tlistToken: nil\n\t\t\t))\n\t\t}\n\n\t\tif items.length != 0 {\n\t\t\tresults[\"Gaia\"] = MetadataCollection(type: Type\u003c@Gaia.Collection\u003e().identifier, items: items)\n\t\t}\n\t}\n\n\tlet chamonsterSeasonTable :  {UInt32: String} = {0 : \"kickstarter\", 1 : \"alpha\", 2 : \"genesis\", 4 : \"flowfest2021\" , 3: \"closedbeta\" }\n\n\tlet chainmonstersRewardsCollection = account.getCapability\u003c\u0026{ChainmonstersRewards.ChainmonstersRewardCollectionPublic}\u003e(/public/ChainmonstersRewardCollection)\n\tif chainmonstersRewardsCollection.check() {\n\t\tlet nfts = chainmonstersRewardsCollection.borrow()!.getIDs()\n\t\tlet items: [MetadataCollectionItem] = []\n\t\tfor id in nfts {\n\t\t\tlet nft = chainmonstersRewardsCollection.borrow()!.borrowReward(id: id)!\n\t\t\tlet rewardID = nft.data.rewardID\n\t\t\t// Other interesting metadata available are:\n\t\t\t// \t\t- serialNumber: nft.data.serialNumber\n\t\t\t// \t\t- totalMinted: ChainmonstersRewards.getNumRewardsMinted(rewardID: nft.data.rewardID)!\n\t\t\tlet season = ChainmonstersRewards.getRewardSeason(rewardID:nft.data.rewardID)!\n\n\t\t\tvar seasonName = chamonsterSeasonTable[season] ?? \"unknown\".concat(season.toString())\n\n\t\t\tif season == 3 \u0026\u0026 rewardID \u003c 45 {\n\t\t\t\tseasonName = \"flowfest2021\"\n\t\t\t}\n\t\t\titems.append(MetadataCollectionItem(\n\t\t\t\tid: id,\n\t\t\t\tname: ChainmonstersRewards.getRewardMetaData(rewardID: nft.data.rewardID)!,\n\t\t\t\timage: \"https://chainmonsters.com/images/rewards/\".concat(seasonName).concat(\"/\").concat(rewardID.toString()).concat(\".png\"),\n\t\t\t\turl: \"https://chainmonsters.com\",\n\t\t\t\tlistPrice: nil,\n\t\t\t\tlistToken: nil\n\t\t\t))\n\t\t}\n\t\tif items.length != 0 {\n\t\t\tresults[\"ChainmonstersRewards\"] = MetadataCollection(type: Type\u003c@ChainmonstersRewards.Collection\u003e().identifier, items: items)\n\t\t}\n\t}\n\n\n\tif results.keys.length == 0 {\n\t\treturn nil\n\t}\n\treturn results\n}",
            "isFindUser": "import Profile from 0x097bafa4e0b48eef\nimport FIND from 0x097bafa4e0b48eef\n\n//Check the status of a fin user\npub fun main(user: Address) : Bool {\n\n\tlet account=getAccount(user)\n\tlet leaseCap=account.getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\tlet profileCap=account.getCapability\u003c\u0026{Profile.Public}\u003e(Profile.publicPath)\n\n\treturn leaseCap.check() \u0026\u0026 profileCap.check()\n\n}",
            "name_status": "import FIND from 0x097bafa4e0b48eef\nimport Profile from 0x097bafa4e0b48eef\n\npub struct FINDNameReport{\n\tpub let profile:Profile.UserProfile?\n\tpub let lease: FIND.LeaseInformation?\n\tpub let status: String\n\tpub let cost: UFix64\n\tpub let leases: [FIND.LeaseInformation]\n\n\tinit(status: String, profile: Profile.UserProfile?, lease : FIND.LeaseInformation?,  cost: UFix64, leases: [FIND.LeaseInformation]) {\n\t\tself.status=status\n\t\tself.profile=profile\n\t\tself.lease=lease\n\t\tself.cost=cost\n\t\tself.leases=leases\n\t}\n}\n\n//Check the status of a fin user\npub fun main(name: String) : FINDNameReport{\n\n\tlet status=FIND.status(name)\n\tlet cost=FIND.calculateCost(name)\n\tif let address=status.owner {\n\t\tlet account=getAccount(address)\n\t\tlet leaseCap = account.getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\n\t\tlet profile= account.getCapability\u003c\u0026{Profile.Public}\u003e(Profile.publicPath).borrow()\n\t\tvar lease:FIND.LeaseInformation?=nil\n\t\tif leaseCap.check() {\n\t\t\tlease=leaseCap.borrow()!.getLease(name)\n\t\t}\n\t\treturn FINDNameReport(\n\t\t\tstatus: lease?.status ?? \"taken\",\n\t\t\tprofile: profile?.asProfile(),\n\t\t\tlease: lease,\n\t\t\tcost:  cost,\n\t\t\tleases: leaseCap.borrow()?.getLeaseInformation() ?? []\n\t\t)\n\n\t}\n\n\tvar statusValue= \"FREE\"\n\tif  status.status == FIND.LeaseStatus.TAKEN {\n\t\tstatusValue=\"NO_PROFILE\"\n\t}\n\treturn FINDNameReport(\n\t\tstatus: statusValue,\n\t\tprofile: nil, \n\t\tlease: nil,\n\t\tcost: cost,\n\t\tleases: [],\n\t)\n\n}",
            "profile": "import Profile from 0x097bafa4e0b48eef\n\n//Check the status of a fin user\npub fun main(address: Address) :  Profile.UserProfile? {\n\treturn getAccount(address)\n\t\t.getCapability\u003c\u0026{Profile.Public}\u003e(Profile.publicPath)\n\t\t.borrow()?.asProfile()\n}",
            "remaining": "import FIND from 0x097bafa4e0b48eef\n\n\n//Check the status of a fin user\npub fun main(user: Address) : [String] {\n\n\tlet account=getAccount(user)\n\tlet leaseCap = account.getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\n\tlet leases=leaseCap.borrow()?.getLeaseInformation() ?? []\n\n\tvar leasesWithBids :[String] =[]\n\tfor lease in leases {\n\t\tif lease.latestBidBy == nil {\n\t\t\tleasesWithBids.append(lease.name)\n\t\t}\n\t}\n\n\treturn leasesWithBids\n}",
            "reserveStatus": "import FIND from 0x097bafa4e0b48eef\n\n\n//Check the status of a fin user\npub fun main(user: Address) : [FIND.LeaseInformation] {\n\n\tlet account=getAccount(user)\n\tlet leaseCap = account.getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\n\tlet leases=leaseCap.borrow()?.getLeaseInformation() ?? []\n\n\tvar leasesWithBids :[FIND.LeaseInformation] =[]\n\tfor lease in leases {\n\t\tif lease.latestBidBy != nil {\n\t\t\tleasesWithBids.append(lease)\n\t\t}\n\t}\n\n\treturn leasesWithBids\n}",
            "status": "import FIND from 0x097bafa4e0b48eef\nimport Profile from 0x097bafa4e0b48eef\n\n//Check the status of a fin user\npub fun main(name: String) :  \u0026{Profile.Public}? {\n    return FIND.lookup(name)\n}"
         },
         "transactions": {
            "bid": "import FIND from 0x097bafa4e0b48eef\nimport FungibleToken from 0xf233dcee88fe0abe\nimport FUSD from 0x3c5959b568896393\n\ntransaction(name: String, amount: UFix64) {\n\tprepare(account: AuthAccount) {\n\n\t\tlet vaultRef = account.borrow\u003c\u0026FUSD.Vault\u003e(from: /storage/fusdVault) ?? panic(\"Could not borrow reference to the fusdVault!\")\n\t\t \n\t\tlet fusdReceiver = account.getCapability\u003c\u0026{FungibleToken.Receiver}\u003e(/public/fusdReceiver)\n\n\t\tlet leaseCollection = account.getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\t\tif !leaseCollection.check() {\n\t\t\taccount.unlink(FIND.LeasePublicPath)\n\t\t\tdestroy \u003c- account.load\u003c@AnyResource\u003e(from:FIND.LeaseStoragePath)\n\t\t\taccount.save(\u003c- FIND.createEmptyLeaseCollection(), to: FIND.LeaseStoragePath)\n\t\t\taccount.link\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e( FIND.LeasePublicPath, target: FIND.LeaseStoragePath)\n\t\t}\n\n\t\tlet bidCollection = account.getCapability\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e(FIND.BidPublicPath)\n\t\tif !bidCollection.check() {\n\t\t\taccount.unlink(FIND.BidPublicPath)\n\t\t\tdestroy \u003c- account.load\u003c@AnyResource\u003e(from:FIND.BidStoragePath)\n\t\t\taccount.save(\u003c- FIND.createEmptyBidCollection(receiver: fusdReceiver, leases: leaseCollection), to: FIND.BidStoragePath)\n\t\t\taccount.link\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e( FIND.BidPublicPath, target: FIND.BidStoragePath)\n\t\t}\n\n\t\tlet vault \u003c- vaultRef.withdraw(amount: amount) as! @FUSD.Vault\n\t\tlet bids = account.borrow\u003c\u0026FIND.BidCollection\u003e(from: FIND.BidStoragePath)!\n\t\tbids.bid(name: name, vault: \u003c- vault)\n\n\t}\n}",
            "bidProfile": "import FIND from 0x097bafa4e0b48eef\nimport FungibleToken from 0xf233dcee88fe0abe\nimport Profile from 0x097bafa4e0b48eef\nimport FUSD from 0x3c5959b568896393\n\ntransaction(name: String, amount: UFix64) {\n\tprepare(account: AuthAccount) {\n\n\n\t\t//Add exising FUSD or create a new one and add it\n\t\tlet fusdReceiver = account.getCapability\u003c\u0026{FungibleToken.Receiver}\u003e(/public/fusdReceiver)\n\t\tif !fusdReceiver.check() {\n\t\t\tlet fusd \u003c- FUSD.createEmptyVault()\n\t\t\taccount.save(\u003c- fusd, to: /storage/fusdVault)\n\t\t\taccount.link\u003c\u0026FUSD.Vault{FungibleToken.Receiver}\u003e( /public/fusdReceiver, target: /storage/fusdVault)\n\t\t\taccount.link\u003c\u0026FUSD.Vault{FungibleToken.Balance}\u003e( /public/fusdBalance, target: /storage/fusdVault)\n\t\t}\n\n\t\tlet leaseCollection = account.getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\t\tif !leaseCollection.check() {\n\t\t\taccount.unlink(FIND.LeasePublicPath)\n\t\t\tdestroy \u003c- account.load\u003c@AnyResource\u003e(from:FIND.LeaseStoragePath)\n\n\t\t\taccount.save(\u003c- FIND.createEmptyLeaseCollection(), to: FIND.LeaseStoragePath)\n\t\t\taccount.link\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e( FIND.LeasePublicPath, target: FIND.LeaseStoragePath)\n\t\t}\n\n\t\tlet bidCollection = account.getCapability\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e(FIND.BidPublicPath)\n\t\tif !bidCollection.check() {\n\t\t\taccount.unlink(FIND.BidPublicPath)\n\t\t\tdestroy \u003c- account.load\u003c@AnyResource\u003e(from:FIND.BidStoragePath)\n\n\t\t\taccount.save(\u003c- FIND.createEmptyBidCollection(receiver: fusdReceiver, leases: leaseCollection), to: FIND.BidStoragePath)\n\t\t\taccount.link\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e( FIND.BidPublicPath, target: FIND.BidStoragePath)\n\t\t}\n\n\t\tlet profileCap = account.getCapability\u003c\u0026{Profile.Public}\u003e(Profile.publicPath)\n\t\tif !profileCap.check() {\n\t\t\taccount.unlink(Profile.publicPath)\n\t\t\tdestroy \u003c- account.load\u003c@AnyResource\u003e(from:Profile.storagePath)\n\n\t\t\tlet profile \u003c-Profile.createUser(name:name, createdAt: \"find\")\n\n\t\t\tlet fusdWallet=Profile.Wallet( name:\"FUSD\", receiver:fusdReceiver, balance:account.getCapability\u003c\u0026{FungibleToken.Balance}\u003e(/public/fusdBalance), accept: Type\u003c@FUSD.Vault\u003e(), names: [\"fusd\", \"stablecoin\"])\n\n\t\t\tprofile.addWallet(fusdWallet)\n\t\t\tprofile.addCollection(Profile.ResourceCollection(\"FINDLeases\",leaseCollection, Type\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(), [\"find\", \"leases\"]))\n\t\t\tprofile.addCollection(Profile.ResourceCollection(\"FINDBids\", bidCollection, Type\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e(), [\"find\", \"bids\"]))\n\n\t\t\taccount.save(\u003c-profile, to: Profile.storagePath)\n\t\t\taccount.link\u003c\u0026Profile.User{Profile.Public}\u003e(Profile.publicPath, target: Profile.storagePath)\n\t\t\taccount.link\u003c\u0026{FungibleToken.Receiver}\u003e(Profile.publicReceiverPath, target: Profile.storagePath)\n\t\t}\n\n\t\tlet vaultRef = account.borrow\u003c\u0026FUSD.Vault\u003e(from: /storage/fusdVault) ?? panic(\"Could not borrow reference to the fusdVault!\")\n\t\tlet vault \u003c- vaultRef.withdraw(amount: amount) as! @FUSD.Vault\n\t\tlet bids = account.borrow\u003c\u0026FIND.BidCollection\u003e(from: FIND.BidStoragePath)!\n\t\tbids.bid(name: name, vault: \u003c- vault)\n\n\t}\n}",
            "cancelAuction": "import FIND from 0x097bafa4e0b48eef\n\ntransaction(name: String) {\n\tprepare(account: AuthAccount) {\n\n\t\tlet finLeases= account.borrow\u003c\u0026FIND.LeaseCollection\u003e(from:FIND.LeaseStoragePath)!\n\t\tfinLeases.cancel(name)\n\t\tfinLeases.delistAuction(name)\n\n\t}\n}",
            "cancelBid": "import FIND from 0x097bafa4e0b48eef\n\ntransaction(name: String) {\n\tprepare(account: AuthAccount) {\n\t\tlet bids = account.borrow\u003c\u0026FIND.BidCollection\u003e(from: FIND.BidStoragePath)!\n\t\tbids.cancelBid(name)\n\t}\n}",
            "createProfile": "import FungibleToken from 0xf233dcee88fe0abe\nimport FUSD from 0x3c5959b568896393\nimport FlowToken from 0x1654653399040a61\nimport FIND from 0x097bafa4e0b48eef\nimport Profile from 0x097bafa4e0b48eef\n\n\n//really not sure on how to input links here.)\ntransaction(name: String) {\n\tprepare(acct: AuthAccount) {\n\t\t//if we do not have a profile it might be stored under a different address so we will just remove it\n\t\tlet profileCap = acct.getCapability\u003c\u0026{Profile.Public}\u003e(Profile.publicPath)\n\t\tif !profileCap.check() {\n\t\t\tacct.unlink(Profile.publicPath)\n\t\t\tdestroy \u003c- acct.load\u003c@AnyResource\u003e(from:Profile.storagePath)\n\t\t}\n\n\t\t//TODO we already have a profile\n\t\tif profileCap.check() {\n\t\t\treturn \n\t\t}\n\n\t\tlet profile \u003c-Profile.createUser(name:name, createdAt: \"find\")\n\n\t\t//Add exising FUSD or create a new one and add it\n\t\tlet fusdReceiver = acct.getCapability\u003c\u0026{FungibleToken.Receiver}\u003e(/public/fusdReceiver)\n\t\tif !fusdReceiver.check() {\n\t\t\tlet fusd \u003c- FUSD.createEmptyVault()\n\t\t\tacct.save(\u003c- fusd, to: /storage/fusdVault)\n\t\t\tacct.link\u003c\u0026FUSD.Vault{FungibleToken.Receiver}\u003e( /public/fusdReceiver, target: /storage/fusdVault)\n\t\t\tacct.link\u003c\u0026FUSD.Vault{FungibleToken.Balance}\u003e( /public/fusdBalance, target: /storage/fusdVault)\n\t\t}\n\n\t\tlet fusdWallet=Profile.Wallet(\n\t\t\tname:\"FUSD\", \n\t\t\treceiver:acct.getCapability\u003c\u0026{FungibleToken.Receiver}\u003e(/public/fusdReceiver),\n\t\t\tbalance:acct.getCapability\u003c\u0026{FungibleToken.Balance}\u003e(/public/fusdBalance),\n\t\t\taccept: Type\u003c@FUSD.Vault\u003e(),\n\t\t\tnames: [\"fusd\", \"stablecoin\"]\n\t\t)\n\n\t\tprofile.addWallet(fusdWallet)\n\n\n\t\tlet flowWallet=Profile.Wallet(\n\t\t\tname:\"Flow\", \n\t\t\treceiver:acct.getCapability\u003c\u0026{FungibleToken.Receiver}\u003e(/public/flowTokenReceiver),\n\t\t\tbalance:acct.getCapability\u003c\u0026{FungibleToken.Balance}\u003e(/public/flowTokenBalance),\n\t\t\taccept: Type\u003c@FlowToken.Vault\u003e(),\n\t\t\tnames: [\"flow\"]\n\t\t)\n\t\tprofile.addWallet(flowWallet)\n\t\tlet leaseCollection = acct.getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\t\tif !leaseCollection.check() {\n\t\t\tacct.unlink(FIND.LeasePublicPath)\n\t\t\tdestroy \u003c- acct.load\u003c@AnyResource\u003e(from:FIND.LeaseStoragePath)\n\t\t\tacct.save(\u003c- FIND.createEmptyLeaseCollection(), to: FIND.LeaseStoragePath)\n\t\t\tacct.link\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e( FIND.LeasePublicPath, target: FIND.LeaseStoragePath)\n\t\t}\n\t\tprofile.addCollection(Profile.ResourceCollection(\"FINDLeases\",leaseCollection, Type\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(), [\"find\", \"leases\"]))\n\n\t\tlet bidCollection = acct.getCapability\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e(FIND.BidPublicPath)\n\t\tif !bidCollection.check() {\n\t\t\tacct.unlink(FIND.BidPublicPath)\n\t\t\tdestroy \u003c- acct.load\u003c@AnyResource\u003e(from:FIND.BidStoragePath)\n\t\t\tacct.save(\u003c- FIND.createEmptyBidCollection(receiver: fusdReceiver, leases: leaseCollection), to: FIND.BidStoragePath)\n\t\t\tacct.link\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e( FIND.BidPublicPath, target: FIND.BidStoragePath)\n\t\t}\n\t\tprofile.addCollection(Profile.ResourceCollection( \"FINDBids\", bidCollection, Type\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e(), [\"find\", \"bids\"]))\n\n\t\tacct.save(\u003c-profile, to: Profile.storagePath)\n\t\tacct.link\u003c\u0026Profile.User{Profile.Public}\u003e(Profile.publicPath, target: Profile.storagePath)\n\t\tacct.link\u003c\u0026{FungibleToken.Receiver}\u003e(Profile.publicReceiverPath, target: Profile.storagePath)\n\n\t}\n}",
            "delistSale": "import FIND from 0x097bafa4e0b48eef\n\ntransaction(name: String) {\n\tprepare(acct: AuthAccount) {\n\t\tlet finLeases= acct.borrow\u003c\u0026FIND.LeaseCollection\u003e(from:FIND.LeaseStoragePath)!\n\t\tfinLeases.delistSale(name)\n\t}\n}",
            "editProfile": "import FungibleToken from 0xf233dcee88fe0abe\nimport FUSD from 0x3c5959b568896393\nimport FlowToken from 0x1654653399040a61\nimport FIND from 0x097bafa4e0b48eef\nimport Profile from 0x097bafa4e0b48eef\n\n\ntransaction(name:String, description: String, avatar: String, tags:[String], allowStoringFollowers: Bool, links: [{String: String}]) {\n\tprepare(acct: AuthAccount) {\n\n\t\tlet profile =acct.borrow\u003c\u0026Profile.User\u003e(from:Profile.storagePath)!\n\n\t\t//Add exising FUSD or create a new one and add it\n\t\tlet fusdReceiver = acct.getCapability\u003c\u0026{FungibleToken.Receiver}\u003e(/public/fusdReceiver)\n\t\tif !fusdReceiver.check() {\n\t\t\tlet fusd \u003c- FUSD.createEmptyVault()\n\t\t\tacct.save(\u003c- fusd, to: /storage/fusdVault)\n\t\t\tacct.link\u003c\u0026FUSD.Vault{FungibleToken.Receiver}\u003e( /public/fusdReceiver, target: /storage/fusdVault)\n\t\t\tacct.link\u003c\u0026FUSD.Vault{FungibleToken.Balance}\u003e( /public/fusdBalance, target: /storage/fusdVault)\n\t\t}\n\n\n\t\tvar hasFusdWallet=false\n\t\tvar hasFlowWallet=false\n\t\tlet wallets=profile.getWallets()\n\t\tfor wallet in wallets {\n\t\t\tif wallet.name==\"FUSD\" {\n\t\t\t\thasFusdWallet=true\n\t\t\t}\n\n\t\t\tif wallet.name ==\"Flow\" {\n\t\t\t\thasFlowWallet=true\n\t\t\t}\n\t\t}\n\n\t\tif !hasFlowWallet {\n\t\t\tlet flowWallet=Profile.Wallet(\n\t\t\t\tname:\"Flow\", \n\t\t\t\treceiver:acct.getCapability\u003c\u0026{FungibleToken.Receiver}\u003e(/public/flowTokenReceiver),\n\t\t\t\tbalance:acct.getCapability\u003c\u0026{FungibleToken.Balance}\u003e(/public/flowTokenBalance),\n\t\t\t\taccept: Type\u003c@FlowToken.Vault\u003e(),\n\t\t\t\tnames: [\"flow\"]\n\t\t\t)\n\t\t\tprofile.addWallet(flowWallet)\n\t\t}\n\n\t\tif !hasFusdWallet {\n\t\t\tlet fusdWallet=Profile.Wallet(\n\t\t\t\tname:\"FUSD\", \n\t\t\t\treceiver:acct.getCapability\u003c\u0026{FungibleToken.Receiver}\u003e(/public/fusdReceiver),\n\t\t\t\tbalance:acct.getCapability\u003c\u0026{FungibleToken.Balance}\u003e(/public/fusdBalance),\n\t\t\t\taccept: Type\u003c@FUSD.Vault\u003e(),\n\t\t\t\tnames: [\"fusd\", \"stablecoin\"]\n\t\t\t)\n\t\t\tprofile.addWallet(fusdWallet)\n\t\t}\n\n\t\tprofile.setName(name)\n\t\tprofile.setDescription(description)\n\t\tprofile.setAvatar(avatar)\n\n\t\tlet existingTags=profile.setTags(tags)\n\n\t\tlet oldLinks=profile.getLinks()\n\n\t\tfor link in links {\n\t\t\tif !link.containsKey(\"title\") {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif link[\"remove\"] == \"true\" {\n\t\t\t\tprofile.removeLink(link[\"title\"]!)\t\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tprofile.addLink(Profile.Link(title: link[\"title\"]!, type: link[\"type\"]!, url: link[\"url\"]!))\n\t\t}\n\t}\n}",
            "fulfill": "import FIND from 0x097bafa4e0b48eef\n\ntransaction(name: String) {\n\tprepare(account: AuthAccount) {\n\n\t\tlet finLeases= account.borrow\u003c\u0026FIND.LeaseCollection\u003e(from:FIND.LeaseStoragePath)!\n\t\tfinLeases.fulfill(name)\n\n\t}\n}",
            "fulfillAuction": "import FIND from 0x097bafa4e0b48eef\n\ntransaction(owner: Address, name: String) {\n\tprepare(account: AuthAccount) {\n\n\t\tlet leaseCollection = getAccount(owner).getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\t\tleaseCollection.borrow()!.fulfillAuction(name)\n\n\t}\n}",
            "fulfillAuctionBidder": "import FIND from 0x097bafa4e0b48eef\nimport FungibleToken from 0xf233dcee88fe0abe\nimport FUSD from 0x3c5959b568896393\nimport Profile from 0x097bafa4e0b48eef\n\ntransaction(owner: Address, name: String) {\n\tprepare(acct: AuthAccount) {\n\n\n\t//Add exising FUSD or create a new one and add it\n\t\tlet fusdReceiver = acct.getCapability\u003c\u0026{FungibleToken.Receiver}\u003e(/public/fusdReceiver)\n\t\tif !fusdReceiver.check() {\n\t\t\tlet fusd \u003c- FUSD.createEmptyVault()\n\t\t\tacct.save(\u003c- fusd, to: /storage/fusdVault)\n\t\t\tacct.link\u003c\u0026FUSD.Vault{FungibleToken.Receiver}\u003e( /public/fusdReceiver, target: /storage/fusdVault)\n\t\t\tacct.link\u003c\u0026FUSD.Vault{FungibleToken.Balance}\u003e( /public/fusdBalance, target: /storage/fusdVault)\n\t\t}\n\n\t\tlet leaseCollection = acct.getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\t\tif !leaseCollection.check() {\n\t\t\tacct.unlink(FIND.LeasePublicPath)\n\t\t\tdestroy \u003c- acct.load\u003c@AnyResource\u003e(from:FIND.LeaseStoragePath)\n\n\t\t\tacct.save(\u003c- FIND.createEmptyLeaseCollection(), to: FIND.LeaseStoragePath)\n\t\t\tacct.link\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e( FIND.LeasePublicPath, target: FIND.LeaseStoragePath)\n\t\t}\n\n\t\tlet bidCollection = acct.getCapability\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e(FIND.BidPublicPath)\n\t\tif !bidCollection.check() {\n\t\t\tacct.unlink(FIND.BidPublicPath)\n\t\t\tdestroy \u003c- acct.load\u003c@AnyResource\u003e(from:FIND.BidStoragePath)\n\n\t\t\tacct.save(\u003c- FIND.createEmptyBidCollection(receiver: fusdReceiver, leases: leaseCollection), to: FIND.BidStoragePath)\n\t\t\tacct.link\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e( FIND.BidPublicPath, target: FIND.BidStoragePath)\n\t\t}\n\n\t\tlet profileCap = acct.getCapability\u003c\u0026{Profile.Public}\u003e(Profile.publicPath)\n\t\tif !profileCap.check() {\n\t\t\tacct.unlink(Profile.publicPath)\n\t\t\tdestroy \u003c- acct.load\u003c@AnyResource\u003e(from:Profile.storagePath)\n\n\t\t\tlet profile \u003c-Profile.createUser(name:name, createdAt: \"find\")\n\n\t\t\tlet fusdWallet=Profile.Wallet( name:\"FUSD\", receiver:fusdReceiver, balance:acct.getCapability\u003c\u0026{FungibleToken.Balance}\u003e(/public/fusdBalance), accept: Type\u003c@FUSD.Vault\u003e(), names: [\"fusd\", \"stablecoin\"])\n\n\t\t\tprofile.addWallet(fusdWallet)\n\t\t\tprofile.addCollection(Profile.ResourceCollection(\"FINDLeases\",leaseCollection, Type\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(), [\"find\", \"leases\"]))\n\t\t\tprofile.addCollection(Profile.ResourceCollection(\"FINDBids\", bidCollection, Type\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e(), [\"find\", \"bids\"]))\n\n\t\t\tacct.save(\u003c-profile, to: Profile.storagePath)\n\t\t\tacct.link\u003c\u0026Profile.User{Profile.Public}\u003e(Profile.publicPath, target: Profile.storagePath)\n\t\t\tacct.link\u003c\u0026{FungibleToken.Receiver}\u003e(Profile.publicReceiverPath, target: Profile.storagePath)\n\t\t}\n\n\t\tlet leaseCollectionOwner = getAccount(owner).getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\t\tleaseCollectionOwner.borrow()!.fulfillAuction(name)\n\n\t}\n}",
            "increaseBid": "import FIND from 0x097bafa4e0b48eef\nimport FungibleToken from 0xf233dcee88fe0abe\nimport FUSD from 0x3c5959b568896393\n\ntransaction(name: String, amount: UFix64) {\n\tprepare(account: AuthAccount) {\n\n\t\tlet vaultRef = account.borrow\u003c\u0026FUSD.Vault\u003e(from: /storage/fusdVault) ?? panic(\"Could not borrow reference to the fusdVault!\")\n\t\t\n\t\tlet fusdReceiver = account.getCapability\u003c\u0026{FungibleToken.Receiver}\u003e(/public/fusdReceiver)\n\n\t\tlet leaseCollection = account.getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\t\tif !leaseCollection.check() {\n\t\t\taccount.save(\u003c- FIND.createEmptyLeaseCollection(), to: FIND.LeaseStoragePath)\n\t\t\taccount.link\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e( FIND.LeasePublicPath, target: FIND.LeaseStoragePath)\n\t\t}\n\n\t\tlet bidCollection = account.getCapability\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e(FIND.BidPublicPath)\n\t\tif !bidCollection.check() {\n\t\t\taccount.save(\u003c- FIND.createEmptyBidCollection(receiver: fusdReceiver, leases: leaseCollection), to: FIND.BidStoragePath)\n\t\t\taccount.link\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e( FIND.BidPublicPath, target: FIND.BidStoragePath)\n\t\t}\n\n\n\t\tlet vault \u003c- vaultRef.withdraw(amount: amount) as! @FUSD.Vault\n\t\tlet bids = account.borrow\u003c\u0026FIND.BidCollection\u003e(from: FIND.BidStoragePath)!\n\t\tbids.increaseBid(name: name, vault: \u003c- vault)\n\n\t}\n}",
            "listForAuction": "import FIND from 0x097bafa4e0b48eef\n\ntransaction(name: String, auctionStartPrice: UFix64, auctionReservePrice: UFix64, auctionDuration: UFix64, auctionExtensionOnLateBid: UFix64) {\n\tprepare(acct: AuthAccount) {\n\t\tlet finLeases= acct.borrow\u003c\u0026FIND.LeaseCollection\u003e(from:FIND.LeaseStoragePath)!\n\t\tfinLeases.listForAuction(name: name, auctionStartPrice: auctionStartPrice, auctionReservePrice: auctionReservePrice, auctionDuration: auctionDuration,  auctionExtensionOnLateBid: auctionExtensionOnLateBid)\n\n\t}\n}",
            "listForSale": "import FIND from 0x097bafa4e0b48eef\n\ntransaction(name: String, directSellPrice:UFix64) {\n\tprepare(acct: AuthAccount) {\n\t\tlet finLeases= acct.borrow\u003c\u0026FIND.LeaseCollection\u003e(from:FIND.LeaseStoragePath)!\n\t\tfinLeases.listForSale(name: name,  directSellPrice:directSellPrice)\n\t}\n}",
            "moveNameToAddress": "import FungibleToken from 0xf233dcee88fe0abe\nimport FUSD from 0x3c5959b568896393\nimport FlowToken from 0x1654653399040a61\nimport Profile from 0x097bafa4e0b48eef\nimport FIND from 0x097bafa4e0b48eef\n\n\ntransaction(name: String, receiverAddress:Address) {\n\n\n\tlet receiverAddress:Address\n\tlet sender : \u0026FIND.LeaseCollection\n\n\tprepare(acct: AuthAccount) {\n\t\tself.sender= acct.borrow\u003c\u0026FIND.LeaseCollection\u003e(from:FIND.LeaseStoragePath)!\n\t\tself.receiverAddress=receiverAddress\n\t} \n\n\texecute {\n\t\tlet receiver=getAccount(self.receiverAddress)\n\t\tlet receiverLease = receiver.getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\t\tlet receiverProfile = receiver.getCapability\u003c\u0026{Profile.Public}\u003e(Profile.publicPath)\n\n\t\tself.sender.move(name:name, profile:receiverProfile, to: receiverLease)\n\t}\n}",
            "moveNameToName": "import FungibleToken from 0xf233dcee88fe0abe\nimport FUSD from 0x3c5959b568896393\nimport FlowToken from 0x1654653399040a61\nimport Profile from 0x097bafa4e0b48eef\nimport FIND from 0x097bafa4e0b48eef\n\n\ntransaction(name: String, receiverName: String) {\n\n\n\tlet receiverAddress:Address\n\tlet sender : \u0026FIND.LeaseCollection\n\n\tprepare(acct: AuthAccount) {\n\n\t\tself.sender= acct.borrow\u003c\u0026FIND.LeaseCollection\u003e(from:FIND.LeaseStoragePath)!\n\t\tself.receiverAddress=FIND.lookupAddress(receiverName) ?? panic(\"cannot resolve address\")\n\n\t} \n\n\texecute {\n\t\tlet receiver=getAccount(self.receiverAddress)\n\t\tlet receiverLease = receiver.getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\t\tlet receiverProfile = receiver.getCapability\u003c\u0026{Profile.Public}\u003e(Profile.publicPath)\n\n\t\tself.sender.move(name:name, profile:receiverProfile, to: receiverLease)\n\t}\n\n\n\n}",
            "register": "import FungibleToken from 0xf233dcee88fe0abe\nimport FUSD from 0x3c5959b568896393\nimport FlowToken from 0x1654653399040a61\nimport Profile from 0x097bafa4e0b48eef\nimport FIND from 0x097bafa4e0b48eef\n\ntransaction(name: String, amount: UFix64) {\n\tprepare(acct: AuthAccount) {\n\n\t\t//Add exising FUSD or create a new one and add it\n\t\tlet fusdReceiver = acct.getCapability\u003c\u0026{FungibleToken.Receiver}\u003e(/public/fusdReceiver)\n\t\tif !fusdReceiver.check() {\n\t\t\tlet fusd \u003c- FUSD.createEmptyVault()\n\t\t\tacct.save(\u003c- fusd, to: /storage/fusdVault)\n\t\t\tacct.link\u003c\u0026FUSD.Vault{FungibleToken.Receiver}\u003e( /public/fusdReceiver, target: /storage/fusdVault)\n\t\t\tacct.link\u003c\u0026FUSD.Vault{FungibleToken.Balance}\u003e( /public/fusdBalance, target: /storage/fusdVault)\n\t\t}\n\n\t\tlet leaseCollection = acct.getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\t\tif !leaseCollection.check() {\n\t\t\tacct.unlink(FIND.LeasePublicPath)\n\t\t\tdestroy \u003c- acct.load\u003c@AnyResource\u003e(from:FIND.LeaseStoragePath)\n\n\t\t\tacct.save(\u003c- FIND.createEmptyLeaseCollection(), to: FIND.LeaseStoragePath)\n\t\t\tacct.link\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e( FIND.LeasePublicPath, target: FIND.LeaseStoragePath)\n\n\t\t}\n\n\t\tlet bidCollection = acct.getCapability\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e(FIND.BidPublicPath)\n\t\tif !bidCollection.check() {\n\t\t\tacct.unlink(FIND.BidPublicPath)\n\t\t\tdestroy \u003c- acct.load\u003c@AnyResource\u003e(from:FIND.BidStoragePath)\n\n\t\t\tacct.save(\u003c- FIND.createEmptyBidCollection(receiver: fusdReceiver, leases: leaseCollection), to: FIND.BidStoragePath)\n\t\t\tacct.link\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e( FIND.BidPublicPath, target: FIND.BidStoragePath)\n\t\t}\n\n\t\tlet profileCap = acct.getCapability\u003c\u0026{Profile.Public}\u003e(Profile.publicPath)\n\t\tif !profileCap.check() {\n\t\t\tacct.unlink(Profile.publicPath)\n\t\t\tdestroy \u003c- acct.load\u003c@AnyResource\u003e(from:Profile.storagePath)\n\n\t\t\tlet profile \u003c-Profile.createUser(name:name, createdAt: \"find\")\n\n\t\t\tlet fusdWallet=Profile.Wallet( name:\"FUSD\", receiver:fusdReceiver, balance:acct.getCapability\u003c\u0026{FungibleToken.Balance}\u003e(/public/fusdBalance), accept: Type\u003c@FUSD.Vault\u003e(), names: [\"fusd\", \"stablecoin\"])\n\n\t\t\tlet flowWallet=Profile.Wallet(\n\t\t\t\tname:\"Flow\", \n\t\t\t\treceiver:acct.getCapability\u003c\u0026{FungibleToken.Receiver}\u003e(/public/flowTokenReceiver),\n\t\t\t\tbalance:acct.getCapability\u003c\u0026{FungibleToken.Balance}\u003e(/public/flowTokenBalance),\n\t\t\t\taccept: Type\u003c@FlowToken.Vault\u003e(),\n\t\t\t\tnames: [\"flow\"]\n\t\t\t)\n\t\n\t\t\tprofile.addWallet(flowWallet)\n\t\t\tprofile.addWallet(fusdWallet)\n\t\t\tprofile.addCollection(Profile.ResourceCollection(\"FINDLeases\",leaseCollection, Type\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(), [\"find\", \"leases\"]))\n\t\t\tprofile.addCollection(Profile.ResourceCollection(\"FINDBids\", bidCollection, Type\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e(), [\"find\", \"bids\"]))\n\n\t\t\tacct.save(\u003c-profile, to: Profile.storagePath)\n\t\t\tacct.link\u003c\u0026Profile.User{Profile.Public}\u003e(Profile.publicPath, target: Profile.storagePath)\n\t\t\tacct.link\u003c\u0026{FungibleToken.Receiver}\u003e(Profile.publicReceiverPath, target: Profile.storagePath)\n\t\t}\n\n\t\tlet price=FIND.calculateCost(name)\n\t\tif price != amount {\n\t\t\tpanic(\"Calculated cost does not match expected cost\")\n\t\t}\n\t\tlog(\"The cost for registering this name is \".concat(price.toString()))\n\n\t\tlet vaultRef = acct.borrow\u003c\u0026FUSD.Vault\u003e(from: /storage/fusdVault) ?? panic(\"Could not borrow reference to the fusdVault!\")\n\n\t\tlet payVault \u003c- vaultRef.withdraw(amount: price) as! @FUSD.Vault\n\n\t\tlet leases=acct.borrow\u003c\u0026FIND.LeaseCollection\u003e(from: FIND.LeaseStoragePath)!\n\t\tleases.register(name: name, vault: \u003c- payVault)\n\n\t}\n}",
            "rejectDirectOffer": "import FIND from 0x097bafa4e0b48eef\n\ntransaction(name: String) {\n\tprepare(account: AuthAccount) {\n\n\t\tlet finLeases= account.borrow\u003c\u0026FIND.LeaseCollection\u003e(from:FIND.LeaseStoragePath)!\n\t\tfinLeases.cancel(name)\n\n\t}\n}",
            "removeProfile": "import Profile from 0x097bafa4e0b48eef\nimport FIND from 0x097bafa4e0b48eef\n\ntransaction() {\n\tprepare(acct: AuthAccount) {\n\t\t\tacct.unlink(Profile.publicPath)\n\t\t\tdestroy \u003c- acct.load\u003c@AnyResource\u003e(from:Profile.storagePath)\n\n\t\t\tacct.unlink(FIND.BidPublicPath)\n\t\t\tdestroy \u003c- acct.load\u003c@AnyResource\u003e(from:FIND.BidStoragePath)\n\n\t\t\tacct.unlink(FIND.LeasePublicPath)\n\t\t\tdestroy \u003c- acct.load\u003c@AnyResource\u003e(from:FIND.LeaseStoragePath)\n\t}\n}",
            "renew": "import FungibleToken from 0xf233dcee88fe0abe\nimport FUSD from 0x3c5959b568896393\nimport Profile from 0x097bafa4e0b48eef\nimport FIND from 0x097bafa4e0b48eef\n\ntransaction(name: String, amount: UFix64) {\n\tprepare(acct: AuthAccount) {\n\n\t\tlet profileCap = acct.getCapability\u003c\u0026{Profile.Public}\u003e(Profile.publicPath)\n\n\t\tlet price=FIND.calculateCost(name)\n\t\tif amount != price {\n\t\t\tpanic(\"expected renew cost is not the same as calculated renew cost\")\n\t\t}\n\t\tlet vaultRef = acct.borrow\u003c\u0026FUSD.Vault\u003e(from: /storage/fusdVault) ?? panic(\"Could not borrow reference to the fusdVault!\")\n\t\tlet payVault \u003c- vaultRef.withdraw(amount: price) as! @FUSD.Vault\n\n\t\tlet finLeases= acct.borrow\u003c\u0026FIND.LeaseCollection\u003e(from:FIND.LeaseStoragePath)!\n\t\tlet finToken= finLeases.borrow(name)\n\t\tfinToken.extendLease(\u003c- payVault)\n\t}\n}",
            "sendFT": "import FUSD from 0x3c5959b568896393\nimport FlowToken from 0x1654653399040a61\nimport FIND from 0x097bafa4e0b48eef\n\ntransaction(name: String, amount: UFix64, type: String) {\n\n    prepare(account: AuthAccount) {\n\n\t\t\t  if type == \"fusd\" {\n\t\t\t\t\tlet vaultRef = account.borrow\u003c\u0026FUSD.Vault\u003e(from: /storage/fusdVault) ?? panic(\"Could not borrow reference to the fusdVault!\")\n\t\t\t\t\tFIND.deposit(to: name, from: \u003c- vaultRef.withdraw(amount: amount))\n\t\t\t\t\treturn \n\t\t\t\t}\n\n\t\t\t\tlet vaultRef = account.borrow\u003c\u0026FlowToken.Vault\u003e(from: /storage/flowTokenVault) ?? panic(\"Could not borrow reference to the fusdVault!\")\n\t\t\t\tFIND.deposit(to: name, from: \u003c- vaultRef.withdraw(amount: amount))\n\n    }\n\n}",
            "setProfile": "import Profile from 0x097bafa4e0b48eef\n\n\ntransaction(avatar: String) {\n\tprepare(acct: AuthAccount) {\n\t\tlet profile =acct.borrow\u003c\u0026Profile.User\u003e(from:Profile.storagePath)!\n\t\tprofile.setAvatar(avatar)\n\t}\n}",
            "startAuction": "import FIND from 0x097bafa4e0b48eef\n\ntransaction(name: String) {\n\tprepare(account: AuthAccount) {\n\n\t\tlet finLeases= account.borrow\u003c\u0026FIND.LeaseCollection\u003e(from:FIND.LeaseStoragePath)!\n\t\tfinLeases.startAuction(name)\n\n\t}\n}"
         }
      },
      "testnet": {
         "scripts": {
            "address_status": "import FIND from 0xa16ab1d0abde3625\nimport Profile from 0xa16ab1d0abde3625\n\npub struct FINDReport{\n\tpub let profile:Profile.UserProfile?\n\tpub let bids: [FIND.BidInfo]\n\tpub let leases: [FIND.LeaseInformation]\n\n\tinit(profile: Profile.UserProfile?, bids: [FIND.BidInfo], leases : [FIND.LeaseInformation]) {\n\t\tself.profile=profile\n\t\tself.bids=bids\n\t\tself.leases=leases\n\t}\n}\n\n//Check the status of a fin user\npub fun main(user: Address) : FINDReport{\n\n\tlet account=getAccount(user)\n\tlet bidCap = account.getCapability\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e(FIND.BidPublicPath)\n\n\tlet leaseCap = account.getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\n\treturn FINDReport(\n\t\tprofile: account.getCapability\u003c\u0026{Profile.Public}\u003e(Profile.publicPath).borrow()?.asProfile(),\n\t\tbids: bidCap.borrow()?.getBids() ?? [],\n\t\tleases: leaseCap.borrow()?.getLeaseInformation() ?? []\n\t)\n\n}",
            "collections": "import NonFungibleToken from 0x631e88ae7f1d7c20\n\n//mainnet\nimport Art from 0xd796ff17107bbff6\nimport Marketplace from 0xd796ff17107bbff6\nimport GooberXContract from 0x34f2bf4a80bb0f69\nimport Flovatar from 0x921ea449dffec68a\nimport FlovatarMarketplace from  0x921ea449dffec68a\nimport RareRooms_NFT from 0x329feb3ab062d289\nimport MotoGPCard from 0xa49cc0ee46c54bfb\nimport Gaia from 0x8b148183c28ff88f\nimport ChainmonstersRewards from 0x93615d25d14fa337\n\n\npub struct MetadataCollection{\n\tpub let type: String\n\tpub let items: [MetadataCollectionItem]\n\n\tinit(type:String, items: [MetadataCollectionItem]) {\n\t\tself.type=type\n\t\tself.items=items\n\t}\n}\n\n\npub struct MetadataCollectionItem {\n\tpub let id:UInt64\n\tpub let name: String\n\tpub let image: String\n\tpub let url: String\n\tpub let listPrice: UFix64?\n\tpub let listToken: String?\n\n\n\tinit(id:UInt64, name:String, image:String, url:String, listPrice: UFix64?, listToken:String?) {\n\t\tself.id=id\n\t\tself.name=name\n\t\tself.url=url\n\t\tself.image=image\n\t\tself.listToken=listToken\n\t\tself.listPrice=listPrice\n\t}\n}\n\npub fun main(address: Address) : {String : MetadataCollection}? {\n\n\tlet account = getAccount(address)\n\tlet results : {String :  MetadataCollection}={}\n\n\tlet flovatarList= Flovatar.getFlovatars(address: address)\n\tif flovatarList.length \u003e 0 {\n\t\tlet items: [MetadataCollectionItem] = []\n\t\tfor flovatar in flovatarList  {\n\t\t\tvar name = flovatar.name\n\t\t\tif name == \"\" {\n\t\t\t\tname=\"Flovatar #\".concat(flovatar.id.toString())\n\t\t\t}\n\t\t\titems.append(MetadataCollectionItem(\n\t\t\t\tid: flovatar.id, \n\t\t\t\tname: name, \n\t\t\t\timage: \"https://flovatar.com/api/image/\".concat(flovatar.id.toString()),\n\t\t\t\turl: \"https://flovatar.com/flovatars/\".concat(flovatar.id.toString()).concat(\"/\").concat(address.toString()),\n\t\t\t\tlistPrice: nil,\n\t\t\t\tlistToken: nil\n\t\t\t))\n\t\t}\n\n\t\tresults[\"flovatar\"] = MetadataCollection(type: Type\u003c@Flovatar.Collection\u003e().identifier, items: items)\n\t}\n\n\tlet flovatarMarketDetails = FlovatarMarketplace.getFlovatarSales(address: address)\n\tif flovatarMarketDetails.length \u003e 0 {\n\t\tlet items: [MetadataCollectionItem] = []\n\t\tfor flovatar in flovatarMarketDetails  {\n\t\t\tvar\tname=\"Flovatar #\".concat(flovatar.id.toString())\n\t\t\titems.append(MetadataCollectionItem(\n\t\t\t\tid: flovatar.id, \n\t\t\t\tname: name, \n\t\t\t\timage: \"https://flovatar.com/api/image/\".concat(flovatar.id.toString()),\n\t\t\t\turl: \"https://flovatar.com/flovatars/\".concat(flovatar.id.toString()).concat(\"/\").concat(address.toString()),\n\t\t\t\tlistPrice: flovatar.price,\n\t\t\t\tlistToken: \"Flow\"\n\t\t\t))\n\t\t}\n\n\t\tif items.length != 0 {\n\t\t\tresults[\"flovatarSales\"] = MetadataCollection(type: Type\u003c@Flovatar.Collection\u003e().identifier, items: items)\n\t\t}\n\t}\n\n\tlet versusImageUrlPrefix = \"https://res.cloudinary.com/dxra4agvf/image/upload/c_fill,w_600/f_auto/maincache\"\n\tlet artList = Art.getArt(address: address)\n\tif artList.length \u003e 0 {\n\t\tlet items: [MetadataCollectionItem] = []\n\t\tfor art in artList {\n\t\t\titems.append(MetadataCollectionItem(\n\t\t\t\tid: art.id, \n\t\t\t\tname: art.metadata.name.concat(\" edition \").concat(art.metadata.edition.toString()).concat(\"/\").concat(art.metadata.maxEdition.toString()).concat(\" by \").concat(art.metadata.artist),  \n\t\t\t\timage: versusImageUrlPrefix.concat(art.cacheKey), \n\t\t\t\turl: \"https://www.versus.auction/piece/\".concat(address.toString()).concat(\"/\").concat(art.id.toString()).concat(\"/\"),\n\t\t\t\tlistPrice: nil,\n\t\t\t\tlistToken: nil\n\t\t\t))\n\t\t}\n\t\tresults[\"versus\"]= MetadataCollection(type: Type\u003c@Art.Collection\u003e().identifier, items: items)\n\t}\n\n\tlet versusMarketplace = account.getCapability\u003c\u0026{Marketplace.SalePublic}\u003e(Marketplace.CollectionPublicPath)\n\tif versusMarketplace.check() {\n\t\tlet items: [MetadataCollectionItem] = []\n\t\tlet versusMarket = versusMarketplace.borrow()!.listSaleItems()\n\t\tfor saleItem in versusMarket {\n\t\t\titems.append(MetadataCollectionItem(\n\t\t\t\tid: saleItem.id, \n\t\t\t\tname: saleItem.art.name.concat(\" edition \").concat(saleItem.art.edition.toString()).concat(\"/\").concat(saleItem.art.maxEdition.toString()).concat(\" by \").concat(saleItem.art.artist),\n\t\t\t\timage: versusImageUrlPrefix.concat(saleItem.cacheKey), \n\t\t\t\turl: \"https://www.versus.auction/listing/\".concat(saleItem.id.toString()).concat(\"/\"),\n\t\t\t\tlistPrice: saleItem.price,\n\t\t\t\tlistToken: \"Flow\"\n\t\t\t))\n\t\t}\n\t\tif items.length != 0 {\n\t\t\tresults[\"versusSale\"]= MetadataCollection(type: Type\u003c@Marketplace.SaleCollection\u003e().identifier, items: items)\n\t\t}\n\t}\n\n\n\tlet goobersCap = account.getCapability\u003c\u0026GooberXContract.Collection{NonFungibleToken.CollectionPublic, GooberXContract.GooberCollectionPublic}\u003e(GooberXContract.CollectionPublicPath)\n\n\tif goobersCap.check() {\n\t\tlet items: [MetadataCollectionItem] = []\n\t\tlet goobers = goobersCap.borrow()!.listUsersGoobers()\n\t\tfor id in goobers.keys {\n\t\t\tlet goober = goobers[id]!\n\t\t\titems.append(MetadataCollectionItem(\n\t\t\t\tid: id,\n\t\t\t\tname: \"Goober #\".concat(id.toString()),\n\t\t\t\timage: goober.uri,\n\t\t\t\turl: \"https://partymansion.io/gooberz/\".concat(id.toString()),\n\t\t\t\tlistPrice: nil,\n\t\t\t\tlistToken: nil\n\t\t\t))\n\n\t\t}\n\t\tif items.length != 0 {\n\t\t\tresults[\"goobers\"] = MetadataCollection(type: Type\u003c@GooberXContract.Collection\u003e().identifier, items: items)\n\t\t}\n\t}\n\n\n\t/*\n\tlet bbCap = account.getCapability\u003c\u0026{BasicBeast.BeastCollectionPublic}\u003e(BasicBeast.CollectionPublicPath)\n\tif bbCap.check() {\n\t\tlet items: [MetadataCollectionItem]=[]\n\t\tlet bb = bbCap.borrow()!\n\n\t\tfor bid in bb.getIDs() {\n\t\t\tlet beast = bb.borrowBeast(id: bid)!\n\t\t\tlet template=beast.data.beastTemplate\n\t\t\tlet name= beast.nickname ?? template.name\n\t\t\titems.append(MetadataCollectionItem(id:beast.id, name:name, url:template.image, ipfsHash:\"\", svg: \"\"))\n\n\t\t}\n\t\tresults[\"basicbeasts\"] = MetadataCollection(type: Type\u003c@BasicBeast.Collection\u003e().identifier, items: items)\n\t}\n\t*/\n\n\n\tlet rareRoomCollection = account.getCapability\u003c\u0026RareRooms_NFT.Collection{RareRooms_NFT.RareRooms_NFTCollectionPublic}\u003e(RareRooms_NFT.CollectionPublicPath)\n\tif rareRoomCollection.check() {\n\t\tlet rareRoomNfts = rareRoomCollection.borrow()!.getIDs()\n\t\tlet items: [MetadataCollectionItem] = []\n\t\tfor id in rareRoomNfts {\n\t\t\tlet nft = rareRoomCollection.borrow()!.borrowRareRooms_NFT(id: id)!\n\t\t\titems.append(MetadataCollectionItem(\n\t\t\t\tid: id,\n\t\t\t\tname: RareRooms_NFT.getSetMetadataByField(setId: nft.setId, field: \"name\")!,\n\t\t\t\t// we use \"preview\" and not \"image\" because of potential .glg and .mp4 file types\n\t\t\t\timage: RareRooms_NFT.getSetMetadataByField(setId: nft.setId, field: \"preview\")!,\n\t\t\t\turl: \"https://rarerooms.io/tokens/\".concat(id.toString()),\n\t\t\t\tlistPrice: nil,\n\t\t\t\tlistToken: nil\n\t\t\t))\n\t\t}\n\n\t\tif items.length != 0 {\n\t\t\tresults[\"RareRooms\"] = MetadataCollection(type: Type\u003c@RareRooms_NFT.Collection\u003e().identifier, items: items)\n\t\t}\n\t}\n\n\n\tlet motoGPCollection = account.getCapability\u003c\u0026MotoGPCard.Collection{MotoGPCard.ICardCollectionPublic}\u003e(/public/motogpCardCollection)\n\tif motoGPCollection.check() {\n\t\tlet motoGPNfts = motoGPCollection.borrow()!.getIDs()\n\t\tlet items: [MetadataCollectionItem] = []\n\t\tfor id in motoGPNfts {\n\t\t\tlet nft = motoGPCollection.borrow()!.borrowCard(id: id)!\n\t\t\tlet metadata = nft.getCardMetadata()!\n\t\t\titems.append(MetadataCollectionItem(\n\t\t\t\tid: id,\n\t\t\t\tname: metadata.name,\n\t\t\t\timage: metadata.imageUrl,\n\t\t\t\turl: \"https://motogp-ignition.com/nft/card/\".concat(id.toString()).concat(\"?owner=\").concat(address.toString()),\n\t\t\t\tlistPrice: nil,\n\t\t\t\tlistToken: nil\n\t\t\t))\n\t\t}\n\n\t\tif items.length != 0 {\n\t\t\tresults[\"MotoGP\"] = MetadataCollection(type: Type\u003c@MotoGPCard.Collection\u003e().identifier, items: items)\n\t\t}\n\t}\n\n\tlet gaiaCollection = account.getCapability\u003c\u0026{Gaia.CollectionPublic}\u003e(Gaia.CollectionPublicPath)\n\tif gaiaCollection.check() {\n\t\tlet gaiaNfts = gaiaCollection.borrow()!.getIDs()\n\t\tlet items: [MetadataCollectionItem] = []\n\t\tfor id in gaiaNfts {\n\t\t\tlet nft = gaiaCollection.borrow()!.borrowGaiaNFT(id: id)!\n\t\t\tlet metadata = Gaia.getTemplateMetaData(templateID: nft.data.templateID)!\n\t\t\titems.append(MetadataCollectionItem(\n\t\t\t\tid: id,\n\t\t\t\tname: metadata[\"title\"]!,\n\t\t\t\timage: metadata[\"img\"]!,\n\t\t\t\turl: metadata[\"uri\"]!,\n\t\t\t\tlistPrice: nil,\n\t\t\t\tlistToken: nil\n\t\t\t))\n\t\t}\n\n\t\tif items.length != 0 {\n\t\t\tresults[\"Gaia\"] = MetadataCollection(type: Type\u003c@Gaia.Collection\u003e().identifier, items: items)\n\t\t}\n\t}\n\n\tlet chamonsterSeasonTable :  {UInt32: String} = {0 : \"kickstarter\", 1 : \"alpha\", 2 : \"genesis\", 4 : \"flowfest2021\" , 3: \"closedbeta\" }\n\n\tlet chainmonstersRewardsCollection = account.getCapability\u003c\u0026{ChainmonstersRewards.ChainmonstersRewardCollectionPublic}\u003e(/public/ChainmonstersRewardCollection)\n\tif chainmonstersRewardsCollection.check() {\n\t\tlet nfts = chainmonstersRewardsCollection.borrow()!.getIDs()\n\t\tlet items: [MetadataCollectionItem] = []\n\t\tfor id in nfts {\n\t\t\tlet nft = chainmonstersRewardsCollection.borrow()!.borrowReward(id: id)!\n\t\t\tlet rewardID = nft.data.rewardID\n\t\t\t// Other interesting metadata available are:\n\t\t\t// \t\t- serialNumber: nft.data.serialNumber\n\t\t\t// \t\t- totalMinted: ChainmonstersRewards.getNumRewardsMinted(rewardID: nft.data.rewardID)!\n\t\t\tlet season = ChainmonstersRewards.getRewardSeason(rewardID:nft.data.rewardID)!\n\n\t\t\tvar seasonName = chamonsterSeasonTable[season] ?? \"unknown\".concat(season.toString())\n\n\t\t\tif season == 3 \u0026\u0026 rewardID \u003c 45 {\n\t\t\t\tseasonName = \"flowfest2021\"\n\t\t\t}\n\t\t\titems.append(MetadataCollectionItem(\n\t\t\t\tid: id,\n\t\t\t\tname: ChainmonstersRewards.getRewardMetaData(rewardID: nft.data.rewardID)!,\n\t\t\t\timage: \"https://chainmonsters.com/images/rewards/\".concat(seasonName).concat(\"/\").concat(rewardID.toString()).concat(\".png\"),\n\t\t\t\turl: \"https://chainmonsters.com\",\n\t\t\t\tlistPrice: nil,\n\t\t\t\tlistToken: nil\n\t\t\t))\n\t\t}\n\t\tif items.length != 0 {\n\t\t\tresults[\"ChainmonstersRewards\"] = MetadataCollection(type: Type\u003c@ChainmonstersRewards.Collection\u003e().identifier, items: items)\n\t\t}\n\t}\n\n\n\tif results.keys.length == 0 {\n\t\treturn nil\n\t}\n\treturn results\n}",
            "isFindUser": "import Profile from 0xa16ab1d0abde3625\nimport FIND from 0xa16ab1d0abde3625\n\n//Check the status of a fin user\npub fun main(user: Address) : Bool {\n\n\tlet account=getAccount(user)\n\tlet leaseCap=account.getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\tlet profileCap=account.getCapability\u003c\u0026{Profile.Public}\u003e(Profile.publicPath)\n\n\treturn leaseCap.check() \u0026\u0026 profileCap.check()\n\n}",
            "name_status": "import FIND from 0xa16ab1d0abde3625\nimport Profile from 0xa16ab1d0abde3625\n\npub struct FINDNameReport{\n\tpub let profile:Profile.UserProfile?\n\tpub let lease: FIND.LeaseInformation?\n\tpub let status: String\n\tpub let cost: UFix64\n\tpub let leases: [FIND.LeaseInformation]\n\n\tinit(status: String, profile: Profile.UserProfile?, lease : FIND.LeaseInformation?,  cost: UFix64, leases: [FIND.LeaseInformation]) {\n\t\tself.status=status\n\t\tself.profile=profile\n\t\tself.lease=lease\n\t\tself.cost=cost\n\t\tself.leases=leases\n\t}\n}\n\n//Check the status of a fin user\npub fun main(name: String) : FINDNameReport{\n\n\tlet status=FIND.status(name)\n\tlet cost=FIND.calculateCost(name)\n\tif let address=status.owner {\n\t\tlet account=getAccount(address)\n\t\tlet leaseCap = account.getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\n\t\tlet profile= account.getCapability\u003c\u0026{Profile.Public}\u003e(Profile.publicPath).borrow()\n\t\tvar lease:FIND.LeaseInformation?=nil\n\t\tif leaseCap.check() {\n\t\t\tlease=leaseCap.borrow()!.getLease(name)\n\t\t}\n\t\treturn FINDNameReport(\n\t\t\tstatus: lease?.status ?? \"taken\",\n\t\t\tprofile: profile?.asProfile(),\n\t\t\tlease: lease,\n\t\t\tcost:  cost,\n\t\t\tleases: leaseCap.borrow()?.getLeaseInformation() ?? []\n\t\t)\n\n\t}\n\n\tvar statusValue= \"FREE\"\n\tif  status.status == FIND.LeaseStatus.TAKEN {\n\t\tstatusValue=\"NO_PROFILE\"\n\t}\n\treturn FINDNameReport(\n\t\tstatus: statusValue,\n\t\tprofile: nil, \n\t\tlease: nil,\n\t\tcost: cost,\n\t\tleases: [],\n\t)\n\n}",
            "profile": "import Profile from 0xa16ab1d0abde3625\n\n//Check the status of a fin user\npub fun main(address: Address) :  Profile.UserProfile? {\n\treturn getAccount(address)\n\t\t.getCapability\u003c\u0026{Profile.Public}\u003e(Profile.publicPath)\n\t\t.borrow()?.asProfile()\n}",
            "remaining": "import FIND from 0xa16ab1d0abde3625\n\n\n//Check the status of a fin user\npub fun main(user: Address) : [String] {\n\n\tlet account=getAccount(user)\n\tlet leaseCap = account.getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\n\tlet leases=leaseCap.borrow()?.getLeaseInformation() ?? []\n\n\tvar leasesWithBids :[String] =[]\n\tfor lease in leases {\n\t\tif lease.latestBidBy == nil {\n\t\t\tleasesWithBids.append(lease.name)\n\t\t}\n\t}\n\n\treturn leasesWithBids\n}",
            "reserveStatus": "import FIND from 0xa16ab1d0abde3625\n\n\n//Check the status of a fin user\npub fun main(user: Address) : [FIND.LeaseInformation] {\n\n\tlet account=getAccount(user)\n\tlet leaseCap = account.getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\n\tlet leases=leaseCap.borrow()?.getLeaseInformation() ?? []\n\n\tvar leasesWithBids :[FIND.LeaseInformation] =[]\n\tfor lease in leases {\n\t\tif lease.latestBidBy != nil {\n\t\t\tleasesWithBids.append(lease)\n\t\t}\n\t}\n\n\treturn leasesWithBids\n}",
            "status": "import FIND from 0xa16ab1d0abde3625\nimport Profile from 0xa16ab1d0abde3625\n\n//Check the status of a fin user\npub fun main(name: String) :  \u0026{Profile.Public}? {\n    return FIND.lookup(name)\n}"
         },
         "transactions": {
            "bid": "import FIND from 0xa16ab1d0abde3625\nimport FungibleToken from 0x9a0766d93b6608b7\nimport FUSD from 0xe223d8a629e49c68\n\ntransaction(name: String, amount: UFix64) {\n\tprepare(account: AuthAccount) {\n\n\t\tlet vaultRef = account.borrow\u003c\u0026FUSD.Vault\u003e(from: /storage/fusdVault) ?? panic(\"Could not borrow reference to the fusdVault!\")\n\t\t \n\t\tlet fusdReceiver = account.getCapability\u003c\u0026{FungibleToken.Receiver}\u003e(/public/fusdReceiver)\n\n\t\tlet leaseCollection = account.getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\t\tif !leaseCollection.check() {\n\t\t\taccount.unlink(FIND.LeasePublicPath)\n\t\t\tdestroy \u003c- account.load\u003c@AnyResource\u003e(from:FIND.LeaseStoragePath)\n\t\t\taccount.save(\u003c- FIND.createEmptyLeaseCollection(), to: FIND.LeaseStoragePath)\n\t\t\taccount.link\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e( FIND.LeasePublicPath, target: FIND.LeaseStoragePath)\n\t\t}\n\n\t\tlet bidCollection = account.getCapability\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e(FIND.BidPublicPath)\n\t\tif !bidCollection.check() {\n\t\t\taccount.unlink(FIND.BidPublicPath)\n\t\t\tdestroy \u003c- account.load\u003c@AnyResource\u003e(from:FIND.BidStoragePath)\n\t\t\taccount.save(\u003c- FIND.createEmptyBidCollection(receiver: fusdReceiver, leases: leaseCollection), to: FIND.BidStoragePath)\n\t\t\taccount.link\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e( FIND.BidPublicPath, target: FIND.BidStoragePath)\n\t\t}\n\n\t\tlet vault \u003c- vaultRef.withdraw(amount: amount) as! @FUSD.Vault\n\t\tlet bids = account.borrow\u003c\u0026FIND.BidCollection\u003e(from: FIND.BidStoragePath)!\n\t\tbids.bid(name: name, vault: \u003c- vault)\n\n\t}\n}",
            "bidProfile": "import FIND from 0xa16ab1d0abde3625\nimport FungibleToken from 0x9a0766d93b6608b7\nimport Profile from 0xa16ab1d0abde3625\nimport FUSD from 0xe223d8a629e49c68\n\ntransaction(name: String, amount: UFix64) {\n\tprepare(account: AuthAccount) {\n\n\n\t\t//Add exising FUSD or create a new one and add it\n\t\tlet fusdReceiver = account.getCapability\u003c\u0026{FungibleToken.Receiver}\u003e(/public/fusdReceiver)\n\t\tif !fusdReceiver.check() {\n\t\t\tlet fusd \u003c- FUSD.createEmptyVault()\n\t\t\taccount.save(\u003c- fusd, to: /storage/fusdVault)\n\t\t\taccount.link\u003c\u0026FUSD.Vault{FungibleToken.Receiver}\u003e( /public/fusdReceiver, target: /storage/fusdVault)\n\t\t\taccount.link\u003c\u0026FUSD.Vault{FungibleToken.Balance}\u003e( /public/fusdBalance, target: /storage/fusdVault)\n\t\t}\n\n\t\tlet leaseCollection = account.getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\t\tif !leaseCollection.check() {\n\t\t\taccount.unlink(FIND.LeasePublicPath)\n\t\t\tdestroy \u003c- account.load\u003c@AnyResource\u003e(from:FIND.LeaseStoragePath)\n\n\t\t\taccount.save(\u003c- FIND.createEmptyLeaseCollection(), to: FIND.LeaseStoragePath)\n\t\t\taccount.link\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e( FIND.LeasePublicPath, target: FIND.LeaseStoragePath)\n\t\t}\n\n\t\tlet bidCollection = account.getCapability\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e(FIND.BidPublicPath)\n\t\tif !bidCollection.check() {\n\t\t\taccount.unlink(FIND.BidPublicPath)\n\t\t\tdestroy \u003c- account.load\u003c@AnyResource\u003e(from:FIND.BidStoragePath)\n\n\t\t\taccount.save(\u003c- FIND.createEmptyBidCollection(receiver: fusdReceiver, leases: leaseCollection), to: FIND.BidStoragePath)\n\t\t\taccount.link\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e( FIND.BidPublicPath, target: FIND.BidStoragePath)\n\t\t}\n\n\t\tlet profileCap = account.getCapability\u003c\u0026{Profile.Public}\u003e(Profile.publicPath)\n\t\tif !profileCap.check() {\n\t\t\taccount.unlink(Profile.publicPath)\n\t\t\tdestroy \u003c- account.load\u003c@AnyResource\u003e(from:Profile.storagePath)\n\n\t\t\tlet profile \u003c-Profile.createUser(name:name, createdAt: \"find\")\n\n\t\t\tlet fusdWallet=Profile.Wallet( name:\"FUSD\", receiver:fusdReceiver, balance:account.getCapability\u003c\u0026{FungibleToken.Balance}\u003e(/public/fusdBalance), accept: Type\u003c@FUSD.Vault\u003e(), names: [\"fusd\", \"stablecoin\"])\n\n\t\t\tprofile.addWallet(fusdWallet)\n\t\t\tprofile.addCollection(Profile.ResourceCollection(\"FINDLeases\",leaseCollection, Type\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(), [\"find\", \"leases\"]))\n\t\t\tprofile.addCollection(Profile.ResourceCollection(\"FINDBids\", bidCollection, Type\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e(), [\"find\", \"bids\"]))\n\n\t\t\taccount.save(\u003c-profile, to: Profile.storagePath)\n\t\t\taccount.link\u003c\u0026Profile.User{Profile.Public}\u003e(Profile.publicPath, target: Profile.storagePath)\n\t\t\taccount.link\u003c\u0026{FungibleToken.Receiver}\u003e(Profile.publicReceiverPath, target: Profile.storagePath)\n\t\t}\n\n\t\tlet vaultRef = account.borrow\u003c\u0026FUSD.Vault\u003e(from: /storage/fusdVault) ?? panic(\"Could not borrow reference to the fusdVault!\")\n\t\tlet vault \u003c- vaultRef.withdraw(amount: amount) as! @FUSD.Vault\n\t\tlet bids = account.borrow\u003c\u0026FIND.BidCollection\u003e(from: FIND.BidStoragePath)!\n\t\tbids.bid(name: name, vault: \u003c- vault)\n\n\t}\n}",
            "cancelAuction": "import FIND from 0xa16ab1d0abde3625\n\ntransaction(name: String) {\n\tprepare(account: AuthAccount) {\n\n\t\tlet finLeases= account.borrow\u003c\u0026FIND.LeaseCollection\u003e(from:FIND.LeaseStoragePath)!\n\t\tfinLeases.cancel(name)\n\t\tfinLeases.delistAuction(name)\n\n\t}\n}",
            "cancelBid": "import FIND from 0xa16ab1d0abde3625\n\ntransaction(name: String) {\n\tprepare(account: AuthAccount) {\n\t\tlet bids = account.borrow\u003c\u0026FIND.BidCollection\u003e(from: FIND.BidStoragePath)!\n\t\tbids.cancelBid(name)\n\t}\n}",
            "createProfile": "import FungibleToken from 0x9a0766d93b6608b7\nimport FUSD from 0xe223d8a629e49c68\nimport FlowToken from 0x7e60df042a9c0868\nimport FIND from 0xa16ab1d0abde3625\nimport Profile from 0xa16ab1d0abde3625\n\n\n//really not sure on how to input links here.)\ntransaction(name: String) {\n\tprepare(acct: AuthAccount) {\n\t\t//if we do not have a profile it might be stored under a different address so we will just remove it\n\t\tlet profileCap = acct.getCapability\u003c\u0026{Profile.Public}\u003e(Profile.publicPath)\n\t\tif !profileCap.check() {\n\t\t\tacct.unlink(Profile.publicPath)\n\t\t\tdestroy \u003c- acct.load\u003c@AnyResource\u003e(from:Profile.storagePath)\n\t\t}\n\n\t\t//TODO we already have a profile\n\t\tif profileCap.check() {\n\t\t\treturn \n\t\t}\n\n\t\tlet profile \u003c-Profile.createUser(name:name, createdAt: \"find\")\n\n\t\t//Add exising FUSD or create a new one and add it\n\t\tlet fusdReceiver = acct.getCapability\u003c\u0026{FungibleToken.Receiver}\u003e(/public/fusdReceiver)\n\t\tif !fusdReceiver.check() {\n\t\t\tlet fusd \u003c- FUSD.createEmptyVault()\n\t\t\tacct.save(\u003c- fusd, to: /storage/fusdVault)\n\t\t\tacct.link\u003c\u0026FUSD.Vault{FungibleToken.Receiver}\u003e( /public/fusdReceiver, target: /storage/fusdVault)\n\t\t\tacct.link\u003c\u0026FUSD.Vault{FungibleToken.Balance}\u003e( /public/fusdBalance, target: /storage/fusdVault)\n\t\t}\n\n\t\tlet fusdWallet=Profile.Wallet(\n\t\t\tname:\"FUSD\", \n\t\t\treceiver:acct.getCapability\u003c\u0026{FungibleToken.Receiver}\u003e(/public/fusdReceiver),\n\t\t\tbalance:acct.getCapability\u003c\u0026{FungibleToken.Balance}\u003e(/public/fusdBalance),\n\t\t\taccept: Type\u003c@FUSD.Vault\u003e(),\n\t\t\tnames: [\"fusd\", \"stablecoin\"]\n\t\t)\n\n\t\tprofile.addWallet(fusdWallet)\n\n\n\t\tlet flowWallet=Profile.Wallet(\n\t\t\tname:\"Flow\", \n\t\t\treceiver:acct.getCapability\u003c\u0026{FungibleToken.Receiver}\u003e(/public/flowTokenReceiver),\n\t\t\tbalance:acct.getCapability\u003c\u0026{FungibleToken.Balance}\u003e(/public/flowTokenBalance),\n\t\t\taccept: Type\u003c@FlowToken.Vault\u003e(),\n\t\t\tnames: [\"flow\"]\n\t\t)\n\t\tprofile.addWallet(flowWallet)\n\t\tlet leaseCollection = acct.getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\t\tif !leaseCollection.check() {\n\t\t\tacct.unlink(FIND.LeasePublicPath)\n\t\t\tdestroy \u003c- acct.load\u003c@AnyResource\u003e(from:FIND.LeaseStoragePath)\n\t\t\tacct.save(\u003c- FIND.createEmptyLeaseCollection(), to: FIND.LeaseStoragePath)\n\t\t\tacct.link\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e( FIND.LeasePublicPath, target: FIND.LeaseStoragePath)\n\t\t}\n\t\tprofile.addCollection(Profile.ResourceCollection(\"FINDLeases\",leaseCollection, Type\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(), [\"find\", \"leases\"]))\n\n\t\tlet bidCollection = acct.getCapability\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e(FIND.BidPublicPath)\n\t\tif !bidCollection.check() {\n\t\t\tacct.unlink(FIND.BidPublicPath)\n\t\t\tdestroy \u003c- acct.load\u003c@AnyResource\u003e(from:FIND.BidStoragePath)\n\t\t\tacct.save(\u003c- FIND.createEmptyBidCollection(receiver: fusdReceiver, leases: leaseCollection), to: FIND.BidStoragePath)\n\t\t\tacct.link\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e( FIND.BidPublicPath, target: FIND.BidStoragePath)\n\t\t}\n\t\tprofile.addCollection(Profile.ResourceCollection( \"FINDBids\", bidCollection, Type\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e(), [\"find\", \"bids\"]))\n\n\t\tacct.save(\u003c-profile, to: Profile.storagePath)\n\t\tacct.link\u003c\u0026Profile.User{Profile.Public}\u003e(Profile.publicPath, target: Profile.storagePath)\n\t\tacct.link\u003c\u0026{FungibleToken.Receiver}\u003e(Profile.publicReceiverPath, target: Profile.storagePath)\n\n\t}\n}",
            "delistSale": "import FIND from 0xa16ab1d0abde3625\n\ntransaction(name: String) {\n\tprepare(acct: AuthAccount) {\n\t\tlet finLeases= acct.borrow\u003c\u0026FIND.LeaseCollection\u003e(from:FIND.LeaseStoragePath)!\n\t\tfinLeases.delistSale(name)\n\t}\n}",
            "editProfile": "import FungibleToken from 0x9a0766d93b6608b7\nimport FUSD from 0xe223d8a629e49c68\nimport FlowToken from 0x7e60df042a9c0868\nimport FIND from 0xa16ab1d0abde3625\nimport Profile from 0xa16ab1d0abde3625\n\n\ntransaction(name:String, description: String, avatar: String, tags:[String], allowStoringFollowers: Bool, links: [{String: String}]) {\n\tprepare(acct: AuthAccount) {\n\n\t\tlet profile =acct.borrow\u003c\u0026Profile.User\u003e(from:Profile.storagePath)!\n\n\t\t//Add exising FUSD or create a new one and add it\n\t\tlet fusdReceiver = acct.getCapability\u003c\u0026{FungibleToken.Receiver}\u003e(/public/fusdReceiver)\n\t\tif !fusdReceiver.check() {\n\t\t\tlet fusd \u003c- FUSD.createEmptyVault()\n\t\t\tacct.save(\u003c- fusd, to: /storage/fusdVault)\n\t\t\tacct.link\u003c\u0026FUSD.Vault{FungibleToken.Receiver}\u003e( /public/fusdReceiver, target: /storage/fusdVault)\n\t\t\tacct.link\u003c\u0026FUSD.Vault{FungibleToken.Balance}\u003e( /public/fusdBalance, target: /storage/fusdVault)\n\t\t}\n\n\n\t\tvar hasFusdWallet=false\n\t\tvar hasFlowWallet=false\n\t\tlet wallets=profile.getWallets()\n\t\tfor wallet in wallets {\n\t\t\tif wallet.name==\"FUSD\" {\n\t\t\t\thasFusdWallet=true\n\t\t\t}\n\n\t\t\tif wallet.name ==\"Flow\" {\n\t\t\t\thasFlowWallet=true\n\t\t\t}\n\t\t}\n\n\t\tif !hasFlowWallet {\n\t\t\tlet flowWallet=Profile.Wallet(\n\t\t\t\tname:\"Flow\", \n\t\t\t\treceiver:acct.getCapability\u003c\u0026{FungibleToken.Receiver}\u003e(/public/flowTokenReceiver),\n\t\t\t\tbalance:acct.getCapability\u003c\u0026{FungibleToken.Balance}\u003e(/public/flowTokenBalance),\n\t\t\t\taccept: Type\u003c@FlowToken.Vault\u003e(),\n\t\t\t\tnames: [\"flow\"]\n\t\t\t)\n\t\t\tprofile.addWallet(flowWallet)\n\t\t}\n\n\t\tif !hasFusdWallet {\n\t\t\tlet fusdWallet=Profile.Wallet(\n\t\t\t\tname:\"FUSD\", \n\t\t\t\treceiver:acct.getCapability\u003c\u0026{FungibleToken.Receiver}\u003e(/public/fusdReceiver),\n\t\t\t\tbalance:acct.getCapability\u003c\u0026{FungibleToken.Balance}\u003e(/public/fusdBalance),\n\t\t\t\taccept: Type\u003c@FUSD.Vault\u003e(),\n\t\t\t\tnames: [\"fusd\", \"stablecoin\"]\n\t\t\t)\n\t\t\tprofile.addWallet(fusdWallet)\n\t\t}\n\n\t\tprofile.setName(name)\n\t\tprofile.setDescription(description)\n\t\tprofile.setAvatar(avatar)\n\n\t\tlet existingTags=profile.setTags(tags)\n\n\t\tlet oldLinks=profile.getLinks()\n\n\t\tfor link in links {\n\t\t\tif !link.containsKey(\"title\") {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif link[\"remove\"] == \"true\" {\n\t\t\t\tprofile.removeLink(link[\"title\"]!)\t\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tprofile.addLink(Profile.Link(title: link[\"title\"]!, type: link[\"type\"]!, url: link[\"url\"]!))\n\t\t}\n\t}\n}",
            "fulfill": "import FIND from 0xa16ab1d0abde3625\n\ntransaction(name: String) {\n\tprepare(account: AuthAccount) {\n\n\t\tlet finLeases= account.borrow\u003c\u0026FIND.LeaseCollection\u003e(from:FIND.LeaseStoragePath)!\n\t\tfinLeases.fulfill(name)\n\n\t}\n}",
            "fulfillAuction": "import FIND from 0xa16ab1d0abde3625\n\ntransaction(owner: Address, name: String) {\n\tprepare(account: AuthAccount) {\n\n\t\tlet leaseCollection = getAccount(owner).getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\t\tleaseCollection.borrow()!.fulfillAuction(name)\n\n\t}\n}",
            "fulfillAuctionBidder": "import FIND from 0xa16ab1d0abde3625\nimport FungibleToken from 0x9a0766d93b6608b7\nimport FUSD from 0xe223d8a629e49c68\nimport Profile from 0xa16ab1d0abde3625\n\ntransaction(owner: Address, name: String) {\n\tprepare(acct: AuthAccount) {\n\n\n\t//Add exising FUSD or create a new one and add it\n\t\tlet fusdReceiver = acct.getCapability\u003c\u0026{FungibleToken.Receiver}\u003e(/public/fusdReceiver)\n\t\tif !fusdReceiver.check() {\n\t\t\tlet fusd \u003c- FUSD.createEmptyVault()\n\t\t\tacct.save(\u003c- fusd, to: /storage/fusdVault)\n\t\t\tacct.link\u003c\u0026FUSD.Vault{FungibleToken.Receiver}\u003e( /public/fusdReceiver, target: /storage/fusdVault)\n\t\t\tacct.link\u003c\u0026FUSD.Vault{FungibleToken.Balance}\u003e( /public/fusdBalance, target: /storage/fusdVault)\n\t\t}\n\n\t\tlet leaseCollection = acct.getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\t\tif !leaseCollection.check() {\n\t\t\tacct.unlink(FIND.LeasePublicPath)\n\t\t\tdestroy \u003c- acct.load\u003c@AnyResource\u003e(from:FIND.LeaseStoragePath)\n\n\t\t\tacct.save(\u003c- FIND.createEmptyLeaseCollection(), to: FIND.LeaseStoragePath)\n\t\t\tacct.link\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e( FIND.LeasePublicPath, target: FIND.LeaseStoragePath)\n\t\t}\n\n\t\tlet bidCollection = acct.getCapability\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e(FIND.BidPublicPath)\n\t\tif !bidCollection.check() {\n\t\t\tacct.unlink(FIND.BidPublicPath)\n\t\t\tdestroy \u003c- acct.load\u003c@AnyResource\u003e(from:FIND.BidStoragePath)\n\n\t\t\tacct.save(\u003c- FIND.createEmptyBidCollection(receiver: fusdReceiver, leases: leaseCollection), to: FIND.BidStoragePath)\n\t\t\tacct.link\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e( FIND.BidPublicPath, target: FIND.BidStoragePath)\n\t\t}\n\n\t\tlet profileCap = acct.getCapability\u003c\u0026{Profile.Public}\u003e(Profile.publicPath)\n\t\tif !profileCap.check() {\n\t\t\tacct.unlink(Profile.publicPath)\n\t\t\tdestroy \u003c- acct.load\u003c@AnyResource\u003e(from:Profile.storagePath)\n\n\t\t\tlet profile \u003c-Profile.createUser(name:name, createdAt: \"find\")\n\n\t\t\tlet fusdWallet=Profile.Wallet( name:\"FUSD\", receiver:fusdReceiver, balance:acct.getCapability\u003c\u0026{FungibleToken.Balance}\u003e(/public/fusdBalance), accept: Type\u003c@FUSD.Vault\u003e(), names: [\"fusd\", \"stablecoin\"])\n\n\t\t\tprofile.addWallet(fusdWallet)\n\t\t\tprofile.addCollection(Profile.ResourceCollection(\"FINDLeases\",leaseCollection, Type\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(), [\"find\", \"leases\"]))\n\t\t\tprofile.addCollection(Profile.ResourceCollection(\"FINDBids\", bidCollection, Type\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e(), [\"find\", \"bids\"]))\n\n\t\t\tacct.save(\u003c-profile, to: Profile.storagePath)\n\t\t\tacct.link\u003c\u0026Profile.User{Profile.Public}\u003e(Profile.publicPath, target: Profile.storagePath)\n\t\t\tacct.link\u003c\u0026{FungibleToken.Receiver}\u003e(Profile.publicReceiverPath, target: Profile.storagePath)\n\t\t}\n\n\t\tlet leaseCollectionOwner = getAccount(owner).getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\t\tleaseCollectionOwner.borrow()!.fulfillAuction(name)\n\n\t}\n}",
            "increaseBid": "import FIND from 0xa16ab1d0abde3625\nimport FungibleToken from 0x9a0766d93b6608b7\nimport FUSD from 0xe223d8a629e49c68\n\ntransaction(name: String, amount: UFix64) {\n\tprepare(account: AuthAccount) {\n\n\t\tlet vaultRef = account.borrow\u003c\u0026FUSD.Vault\u003e(from: /storage/fusdVault) ?? panic(\"Could not borrow reference to the fusdVault!\")\n\t\t\n\t\tlet fusdReceiver = account.getCapability\u003c\u0026{FungibleToken.Receiver}\u003e(/public/fusdReceiver)\n\n\t\tlet leaseCollection = account.getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\t\tif !leaseCollection.check() {\n\t\t\taccount.save(\u003c- FIND.createEmptyLeaseCollection(), to: FIND.LeaseStoragePath)\n\t\t\taccount.link\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e( FIND.LeasePublicPath, target: FIND.LeaseStoragePath)\n\t\t}\n\n\t\tlet bidCollection = account.getCapability\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e(FIND.BidPublicPath)\n\t\tif !bidCollection.check() {\n\t\t\taccount.save(\u003c- FIND.createEmptyBidCollection(receiver: fusdReceiver, leases: leaseCollection), to: FIND.BidStoragePath)\n\t\t\taccount.link\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e( FIND.BidPublicPath, target: FIND.BidStoragePath)\n\t\t}\n\n\n\t\tlet vault \u003c- vaultRef.withdraw(amount: amount) as! @FUSD.Vault\n\t\tlet bids = account.borrow\u003c\u0026FIND.BidCollection\u003e(from: FIND.BidStoragePath)!\n\t\tbids.increaseBid(name: name, vault: \u003c- vault)\n\n\t}\n}",
            "listForAuction": "import FIND from 0xa16ab1d0abde3625\n\ntransaction(name: String, auctionStartPrice: UFix64, auctionReservePrice: UFix64, auctionDuration: UFix64, auctionExtensionOnLateBid: UFix64) {\n\tprepare(acct: AuthAccount) {\n\t\tlet finLeases= acct.borrow\u003c\u0026FIND.LeaseCollection\u003e(from:FIND.LeaseStoragePath)!\n\t\tfinLeases.listForAuction(name: name, auctionStartPrice: auctionStartPrice, auctionReservePrice: auctionReservePrice, auctionDuration: auctionDuration,  auctionExtensionOnLateBid: auctionExtensionOnLateBid)\n\n\t}\n}",
            "listForSale": "import FIND from 0xa16ab1d0abde3625\n\ntransaction(name: String, directSellPrice:UFix64) {\n\tprepare(acct: AuthAccount) {\n\t\tlet finLeases= acct.borrow\u003c\u0026FIND.LeaseCollection\u003e(from:FIND.LeaseStoragePath)!\n\t\tfinLeases.listForSale(name: name,  directSellPrice:directSellPrice)\n\t}\n}",
            "moveNameToAddress": "import FungibleToken from 0x9a0766d93b6608b7\nimport FUSD from 0xe223d8a629e49c68\nimport FlowToken from 0x7e60df042a9c0868\nimport Profile from 0xa16ab1d0abde3625\nimport FIND from 0xa16ab1d0abde3625\n\n\ntransaction(name: String, receiverAddress:Address) {\n\n\n\tlet receiverAddress:Address\n\tlet sender : \u0026FIND.LeaseCollection\n\n\tprepare(acct: AuthAccount) {\n\t\tself.sender= acct.borrow\u003c\u0026FIND.LeaseCollection\u003e(from:FIND.LeaseStoragePath)!\n\t\tself.receiverAddress=receiverAddress\n\t} \n\n\texecute {\n\t\tlet receiver=getAccount(self.receiverAddress)\n\t\tlet receiverLease = receiver.getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\t\tlet receiverProfile = receiver.getCapability\u003c\u0026{Profile.Public}\u003e(Profile.publicPath)\n\n\t\tself.sender.move(name:name, profile:receiverProfile, to: receiverLease)\n\t}\n}",
            "moveNameToName": "import FungibleToken from 0x9a0766d93b6608b7\nimport FUSD from 0xe223d8a629e49c68\nimport FlowToken from 0x7e60df042a9c0868\nimport Profile from 0xa16ab1d0abde3625\nimport FIND from 0xa16ab1d0abde3625\n\n\ntransaction(name: String, receiverName: String) {\n\n\n\tlet receiverAddress:Address\n\tlet sender : \u0026FIND.LeaseCollection\n\n\tprepare(acct: AuthAccount) {\n\n\t\tself.sender= acct.borrow\u003c\u0026FIND.LeaseCollection\u003e(from:FIND.LeaseStoragePath)!\n\t\tself.receiverAddress=FIND.lookupAddress(receiverName) ?? panic(\"cannot resolve address\")\n\n\t} \n\n\texecute {\n\t\tlet receiver=getAccount(self.receiverAddress)\n\t\tlet receiverLease = receiver.getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\t\tlet receiverProfile = receiver.getCapability\u003c\u0026{Profile.Public}\u003e(Profile.publicPath)\n\n\t\tself.sender.move(name:name, profile:receiverProfile, to: receiverLease)\n\t}\n\n\n\n}",
            "register": "import FungibleToken from 0x9a0766d93b6608b7\nimport FUSD from 0xe223d8a629e49c68\nimport FlowToken from 0x7e60df042a9c0868\nimport Profile from 0xa16ab1d0abde3625\nimport FIND from 0xa16ab1d0abde3625\n\ntransaction(name: String, amount: UFix64) {\n\tprepare(acct: AuthAccount) {\n\n\t\t//Add exising FUSD or create a new one and add it\n\t\tlet fusdReceiver = acct.getCapability\u003c\u0026{FungibleToken.Receiver}\u003e(/public/fusdReceiver)\n\t\tif !fusdReceiver.check() {\n\t\t\tlet fusd \u003c- FUSD.createEmptyVault()\n\t\t\tacct.save(\u003c- fusd, to: /storage/fusdVault)\n\t\t\tacct.link\u003c\u0026FUSD.Vault{FungibleToken.Receiver}\u003e( /public/fusdReceiver, target: /storage/fusdVault)\n\t\t\tacct.link\u003c\u0026FUSD.Vault{FungibleToken.Balance}\u003e( /public/fusdBalance, target: /storage/fusdVault)\n\t\t}\n\n\t\tlet leaseCollection = acct.getCapability\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(FIND.LeasePublicPath)\n\t\tif !leaseCollection.check() {\n\t\t\tacct.unlink(FIND.LeasePublicPath)\n\t\t\tdestroy \u003c- acct.load\u003c@AnyResource\u003e(from:FIND.LeaseStoragePath)\n\n\t\t\tacct.save(\u003c- FIND.createEmptyLeaseCollection(), to: FIND.LeaseStoragePath)\n\t\t\tacct.link\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e( FIND.LeasePublicPath, target: FIND.LeaseStoragePath)\n\n\t\t}\n\n\t\tlet bidCollection = acct.getCapability\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e(FIND.BidPublicPath)\n\t\tif !bidCollection.check() {\n\t\t\tacct.unlink(FIND.BidPublicPath)\n\t\t\tdestroy \u003c- acct.load\u003c@AnyResource\u003e(from:FIND.BidStoragePath)\n\n\t\t\tacct.save(\u003c- FIND.createEmptyBidCollection(receiver: fusdReceiver, leases: leaseCollection), to: FIND.BidStoragePath)\n\t\t\tacct.link\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e( FIND.BidPublicPath, target: FIND.BidStoragePath)\n\t\t}\n\n\t\tlet profileCap = acct.getCapability\u003c\u0026{Profile.Public}\u003e(Profile.publicPath)\n\t\tif !profileCap.check() {\n\t\t\tacct.unlink(Profile.publicPath)\n\t\t\tdestroy \u003c- acct.load\u003c@AnyResource\u003e(from:Profile.storagePath)\n\n\t\t\tlet profile \u003c-Profile.createUser(name:name, createdAt: \"find\")\n\n\t\t\tlet fusdWallet=Profile.Wallet( name:\"FUSD\", receiver:fusdReceiver, balance:acct.getCapability\u003c\u0026{FungibleToken.Balance}\u003e(/public/fusdBalance), accept: Type\u003c@FUSD.Vault\u003e(), names: [\"fusd\", \"stablecoin\"])\n\n\t\t\tlet flowWallet=Profile.Wallet(\n\t\t\t\tname:\"Flow\", \n\t\t\t\treceiver:acct.getCapability\u003c\u0026{FungibleToken.Receiver}\u003e(/public/flowTokenReceiver),\n\t\t\t\tbalance:acct.getCapability\u003c\u0026{FungibleToken.Balance}\u003e(/public/flowTokenBalance),\n\t\t\t\taccept: Type\u003c@FlowToken.Vault\u003e(),\n\t\t\t\tnames: [\"flow\"]\n\t\t\t)\n\t\n\t\t\tprofile.addWallet(flowWallet)\n\t\t\tprofile.addWallet(fusdWallet)\n\t\t\tprofile.addCollection(Profile.ResourceCollection(\"FINDLeases\",leaseCollection, Type\u003c\u0026FIND.LeaseCollection{FIND.LeaseCollectionPublic}\u003e(), [\"find\", \"leases\"]))\n\t\t\tprofile.addCollection(Profile.ResourceCollection(\"FINDBids\", bidCollection, Type\u003c\u0026FIND.BidCollection{FIND.BidCollectionPublic}\u003e(), [\"find\", \"bids\"]))\n\n\t\t\tacct.save(\u003c-profile, to: Profile.storagePath)\n\t\t\tacct.link\u003c\u0026Profile.User{Profile.Public}\u003e(Profile.publicPath, target: Profile.storagePath)\n\t\t\tacct.link\u003c\u0026{FungibleToken.Receiver}\u003e(Profile.publicReceiverPath, target: Profile.storagePath)\n\t\t}\n\n\t\tlet price=FIND.calculateCost(name)\n\t\tif price != amount {\n\t\t\tpanic(\"Calculated cost does not match expected cost\")\n\t\t}\n\t\tlog(\"The cost for registering this name is \".concat(price.toString()))\n\n\t\tlet vaultRef = acct.borrow\u003c\u0026FUSD.Vault\u003e(from: /storage/fusdVault) ?? panic(\"Could not borrow reference to the fusdVault!\")\n\n\t\tlet payVault \u003c- vaultRef.withdraw(amount: price) as! @FUSD.Vault\n\n\t\tlet leases=acct.borrow\u003c\u0026FIND.LeaseCollection\u003e(from: FIND.LeaseStoragePath)!\n\t\tleases.register(name: name, vault: \u003c- payVault)\n\n\t}\n}",
            "rejectDirectOffer": "import FIND from 0xa16ab1d0abde3625\n\ntransaction(name: String) {\n\tprepare(account: AuthAccount) {\n\n\t\tlet finLeases= account.borrow\u003c\u0026FIND.LeaseCollection\u003e(from:FIND.LeaseStoragePath)!\n\t\tfinLeases.cancel(name)\n\n\t}\n}",
            "removeProfile": "import Profile from 0xa16ab1d0abde3625\nimport FIND from 0xa16ab1d0abde3625\n\ntransaction() {\n\tprepare(acct: AuthAccount) {\n\t\t\tacct.unlink(Profile.publicPath)\n\t\t\tdestroy \u003c- acct.load\u003c@AnyResource\u003e(from:Profile.storagePath)\n\n\t\t\tacct.unlink(FIND.BidPublicPath)\n\t\t\tdestroy \u003c- acct.load\u003c@AnyResource\u003e(from:FIND.BidStoragePath)\n\n\t\t\tacct.unlink(FIND.LeasePublicPath)\n\t\t\tdestroy \u003c- acct.load\u003c@AnyResource\u003e(from:FIND.LeaseStoragePath)\n\t}\n}",
            "renew": "import FungibleToken from 0x9a0766d93b6608b7\nimport FUSD from 0xe223d8a629e49c68\nimport Profile from 0xa16ab1d0abde3625\nimport FIND from 0xa16ab1d0abde3625\n\ntransaction(name: String, amount: UFix64) {\n\tprepare(acct: AuthAccount) {\n\n\t\tlet profileCap = acct.getCapability\u003c\u0026{Profile.Public}\u003e(Profile.publicPath)\n\n\t\tlet price=FIND.calculateCost(name)\n\t\tif amount != price {\n\t\t\tpanic(\"expected renew cost is not the same as calculated renew cost\")\n\t\t}\n\t\tlet vaultRef = acct.borrow\u003c\u0026FUSD.Vault\u003e(from: /storage/fusdVault) ?? panic(\"Could not borrow reference to the fusdVault!\")\n\t\tlet payVault \u003c- vaultRef.withdraw(amount: price) as! @FUSD.Vault\n\n\t\tlet finLeases= acct.borrow\u003c\u0026FIND.LeaseCollection\u003e(from:FIND.LeaseStoragePath)!\n\t\tlet finToken= finLeases.borrow(name)\n\t\tfinToken.extendLease(\u003c- payVault)\n\t}\n}",
            "sendFT": "import FUSD from 0xe223d8a629e49c68\nimport FlowToken from 0x7e60df042a9c0868\nimport FIND from 0xa16ab1d0abde3625\n\ntransaction(name: String, amount: UFix64, type: String) {\n\n    prepare(account: AuthAccount) {\n\n\t\t\t  if type == \"fusd\" {\n\t\t\t\t\tlet vaultRef = account.borrow\u003c\u0026FUSD.Vault\u003e(from: /storage/fusdVault) ?? panic(\"Could not borrow reference to the fusdVault!\")\n\t\t\t\t\tFIND.deposit(to: name, from: \u003c- vaultRef.withdraw(amount: amount))\n\t\t\t\t\treturn \n\t\t\t\t}\n\n\t\t\t\tlet vaultRef = account.borrow\u003c\u0026FlowToken.Vault\u003e(from: /storage/flowTokenVault) ?? panic(\"Could not borrow reference to the fusdVault!\")\n\t\t\t\tFIND.deposit(to: name, from: \u003c- vaultRef.withdraw(amount: amount))\n\n    }\n\n}",
            "setProfile": "import Profile from 0xa16ab1d0abde3625\n\n\ntransaction(avatar: String) {\n\tprepare(acct: AuthAccount) {\n\t\tlet profile =acct.borrow\u003c\u0026Profile.User\u003e(from:Profile.storagePath)!\n\t\tprofile.setAvatar(avatar)\n\t}\n}",
            "startAuction": "import FIND from 0xa16ab1d0abde3625\n\ntransaction(name: String) {\n\tprepare(account: AuthAccount) {\n\n\t\tlet finLeases= account.borrow\u003c\u0026FIND.LeaseCollection\u003e(from:FIND.LeaseStoragePath)!\n\t\tfinLeases.startAuction(name)\n\n\t}\n}"
         }
      }
   }
}
